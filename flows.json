[
    {
        "id": "a57fac41b6cd215f",
        "type": "tab",
        "label": "auth",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fd22afc886f3ef76",
        "type": "tab",
        "label": "link",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "98bdf776d7929776",
        "type": "tab",
        "label": "management",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1a3f32f08a9b2467",
        "type": "tab",
        "label": "Flow 4",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1c6436f0bc754238",
        "type": "tab",
        "label": "publishers",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9389cb2012328a74",
        "type": "tab",
        "label": "ads",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "958cd5c3acecabb1",
        "type": "tab",
        "label": "map",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "26bcada27220ca80",
        "type": "subflow",
        "name": "Check Auth",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 320,
                "wires": [
                    {
                        "id": "458c39aab0877d27"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 320,
                "wires": [
                    {
                        "id": "fa23647ec8fa3e98",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "26b1192b9582966c",
        "type": "group",
        "z": "98bdf776d7929776",
        "name": "Authorization",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "ce613a1ab9a4c802",
            "d5977d50e50ebe58",
            "09ed6db380e98e1f",
            "945aab7964ca11d0",
            "e43289aae23a430c",
            "d8765175ff1b8063",
            "dff022148f7953ca",
            "763e88a17c9b43ea",
            "2cd3feac44192156",
            "83dcd66fc1c9ac85",
            "39024dce03bbf721",
            "2107ae381216ea1a",
            "231e7687a407c538",
            "6cf7eec3c9697575",
            "d86476937155ebbc",
            "7d42b25738b37bcc",
            "3578f99d60af9bc1",
            "1fe6725a94a7c6bc",
            "96239d3f5ca2c84b",
            "80081aa9ffcf7ce1",
            "e914dc7611910b72",
            "7e6e0f9c164caa8a",
            "9c57e8f5d4c1211f",
            "2076bd58b1bbd608",
            "6417b0dc97774de7",
            "b30e0b3c7d2ca378",
            "4d50c91609cc50b1",
            "ca4e701a6f11738a",
            "757d1afef4aa575e",
            "a3be897a9bd2ae8d",
            "2ba08337a88c1175",
            "482f6c6a6c9d6e4a",
            "f725caabe8647a62",
            "79e3bdc1637cd283",
            "e97aa3d260589450",
            "9f055f2d04b14a02",
            "84d896ccb2876d90",
            "0f84ecbdb3991932",
            "7e6d8ae51667beb0",
            "4ea6dbc00d23dab8",
            "aa05fbe63e086c25",
            "1ae19061415b0ead",
            "c86ef6b2f9c654aa",
            "d53c896c09832cee",
            "995142185ee6101c",
            "bff4ca8b25fca2c7",
            "27c892cb4a5efda5",
            "db42d5f7dfd38bd8",
            "53652c487cff3371",
            "98ecc6557d063730",
            "287d51ef25bb705e",
            "f85e07b8d78a44eb",
            "7b08d554ef93d33d",
            "d57418f8cd0766c8",
            "ad5fd8483cecbff0",
            "9d3fc81648c3397b",
            "038e28c98de9c400",
            "02030a3a8bea96cd",
            "c3ca290848a8f565",
            "412b9b1ee80dbbf1",
            "49d4900c741813e0"
        ],
        "x": 14,
        "y": 19
    },
    {
        "id": "e943b30943f1b03a",
        "type": "group",
        "z": "98bdf776d7929776",
        "name": "Modules",
        "style": {
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "9ad63f5ab7422996",
            "c355943846de0823",
            "ff8ed04a2729e776",
            "23d0402206424164",
            "1df2e6cae6324b5d",
            "13fccd6aadbc8493",
            "5df40dc7d6b9453a",
            "91e885ac872a2cdf",
            "4fa1a49b1afb8a6e",
            "83bf0f22f122688a",
            "f0bd0ad4ad86c733",
            "f725875202ae2f7f",
            "3f270dcd44313da5",
            "fdcda7640999ec2c",
            "a19200861a67180d",
            "e7a81447db7c6fdd",
            "29d8eb2c13cdeca2",
            "e0085bdfe0b34fb2",
            "0db0ac679ce2027b",
            "039fd114b54b9778",
            "9f75ba6d803b5207",
            "c15a37dc9e05fee9",
            "34a9ffbc8bbfd214",
            "61510b81b0c39df8",
            "84f0f02da51d773f",
            "6a53a0dae9677b3e",
            "d2b447303af2add4",
            "c8f29a3e069d9619",
            "32dbb6086d3a27ce",
            "1043c929fc557c7f",
            "d7080591809d92e5",
            "218bf1fbac5a65a9",
            "df99b0731a55e82b",
            "1d438df15537b644",
            "67a3b3c3c74375ac",
            "a965955e91494a5a",
            "909d701e2ff20db5",
            "3620d3c1707e795a",
            "561b0c80941b7471",
            "bef24defcbfb6c70",
            "bbbccfc4f6a91996",
            "9deb5f22258b38de",
            "54a07e73b611ae1d",
            "236c0834e8fd9c13",
            "f58fbe0b47fe3119",
            "b698014f154d2261",
            "e467c152c15db80d",
            "4ed4df62196d54ca",
            "b28fcbe36785a21e",
            "5ad538f143332e49",
            "01ef271a90094545",
            "0ca74531634bcb42",
            "8a5d1b032e27404a"
        ],
        "x": 34,
        "y": 1599
    },
    {
        "id": "a704f946e42595e0",
        "type": "group",
        "z": "98bdf776d7929776",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "2b761d4cda82bce2",
            "69ce44f6afc97ddc",
            "03104a93fe9972c7",
            "e33ffd2b28474940",
            "6dcde0508a25445e",
            "3cbe9b885cd9fb0b",
            "80c792926a940ad6",
            "d533301c3465a5b9",
            "86f8c6e5f08271e3",
            "5503039a66ee9a9b",
            "42cde0e857c2158e",
            "891c03feb5be8968",
            "6857847cef200e0f",
            "0bf6f2e4d5479451",
            "87cdb1a5dc7d9680",
            "0b32d65b041f30cf",
            "34a0cf4f007e1ede",
            "86fe02c26a7a566e",
            "a7a917be9f324bf1",
            "9ab77d448ac64263",
            "9f62c66a082cd180",
            "641a55eab5e267d3",
            "ffc64ad6b52688be",
            "c559247ecb1c25e6",
            "0e392d11e7195050",
            "ea43fc49c06c69f4",
            "26caf235c87c974a",
            "29ac45d1d556a008",
            "8bd9c5149de03287",
            "e5b16cb71b692b66",
            "93a3ec0e582f4f5c",
            "405fdb5319c967c6",
            "c6fc847deed90830",
            "ff26e8f6d3d6c9ba",
            "d2c211b834120ee3",
            "84ed39a07b136660",
            "0b370c06eae18a69",
            "a7acaa010321b1a7",
            "0e6c2c59a16d1834",
            "a7ed5b78c8f1573c",
            "896bbb4449a7aead",
            "b014a0fe6fdc966d",
            "4f8ddec7275061b3",
            "5dac5ff5d5cbf8f9",
            "8c345b1fba62f9ad",
            "edacad6d9d0d3741",
            "4ec401a0549074e5",
            "6390855bb4067bf5",
            "320078212ad892ba",
            "c1f63db9a62c8ece",
            "71d2a03814a9dfee",
            "2be1f687f03183dc",
            "ba606f795586b668",
            "2d970610487f342d",
            "d021b73557844c5a",
            "8afc0843d80b0b3a",
            "cffeca83afaf886f",
            "3dc4c8b7947bf50f",
            "0dec82b8ee2368ab",
            "c7c0b22d693bde94",
            "ce27ac35d95f93b2",
            "fef6a5357f084eda",
            "e6660e53f03e6934",
            "451cfeb39cec4864",
            "80fd02b46f9bfaa5",
            "8bf0d9866e1fb202",
            "a684341558bd0590",
            "fe24c5934eabbc00",
            "36fb081cfe2276b7"
        ],
        "x": 34,
        "y": 2659
    },
    {
        "id": "c93da496677870ef",
        "type": "group",
        "z": "98bdf776d7929776",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "98abc1a2817ec506",
            "0a2bbd05c8f56f64",
            "d400e54e78691b09",
            "b96a7e3142d5e0b8",
            "6efd03b5c14e1a0a",
            "5948e3b76171e9d8",
            "4dd4e65e03666b78",
            "a3a1fe41c52e793d",
            "84a635c5a4940186",
            "a2a65602eb7e991e",
            "b217419fbab3ef52",
            "8444458ae75aadd0",
            "cf959feab34c6243",
            "51aa516723d2730d",
            "0dc46349ee8a11eb",
            "8d15837898b2a23a",
            "9d5b70569d05cb68",
            "4dfd050edab2c52e",
            "cef79f955eca20c3",
            "ed0b45a9c3b3b3f2",
            "9f748da111a88366",
            "74a5f0064f496862",
            "5def8644213ddab4",
            "29b939a2b731ac5b",
            "88bf3ec899eae994",
            "607ead0882586594",
            "ad6d4c82c65d1795",
            "ad4a52f76d4198c5",
            "c50f1276d2d88c9e",
            "5a459724ad591bc6",
            "483cd4354a884e7a",
            "e8126ce507b79580",
            "9fd30dbac3f51e1a",
            "268428d7f2b5a16f",
            "2fa600850fa71aa1",
            "154195fad4d7e70d",
            "249d038ac29bd16a",
            "e7e9faa3517838c9",
            "65aa69e53f380ccd"
        ],
        "x": 14,
        "y": 779
    },
    {
        "id": "3515127ffe97c22a",
        "type": "mongodb",
        "hostname": "db640710a9afb6f81000000022-1678192649607mongo.ubos-xb9xt",
        "topology": "direct",
        "connectOptions": "authSource=admin",
        "port": "27017",
        "db": "mongo",
        "name": "ubos"
    },
    {
        "id": "b5ef6c18b762a1a5",
        "type": "mongodb",
        "hostname": "db640710a9afb6f81000000022-1683181309628mongo-ads.ubos-xb9xt",
        "topology": "direct",
        "connectOptions": "authSource=admin",
        "port": "27017",
        "db": "mongo-ads",
        "name": ""
    },
    {
        "id": "b82197f006b95945",
        "type": "postgresdb",
        "cfgname": "po",
        "hostname": "db640710a9afb6f81000000022-1683183235529postgres.ubos-xb9xt",
        "port": "5432",
        "db": "postgres",
        "ssl": false
    },
    {
        "id": "6d0ad281010dcadb",
        "type": "postgresdb",
        "cfgname": "",
        "hostname": "db640710a9afb6f81000000022-1678192186994main.ubos-xb9xt",
        "port": "5432",
        "db": "main",
        "ssl": false
    },
    {
        "id": "e6a1a3e2f95f70b9",
        "type": "websocket-listener",
        "path": "/ws/testdata",
        "wholemsg": "false"
    },
    {
        "id": "c242409209d7320d",
        "type": "websocket-listener",
        "path": "/ws/data",
        "wholemsg": "false"
    },
    {
        "id": "458c39aab0877d27",
        "type": "function",
        "z": "26bcada27220ca80",
        "name": "check jwt",
        "func": "msg.oldpayload=msg.payload;\n\nlet token = msg.req.cookies.user_token\nif(token){\nvar decoded = jwt.verify(msg.req.cookies.user_token, 'test');\nmsg.payload = decoded\n\n\nreturn [msg,null];\n}\nelse{\n    msg.statusCode=404\n    msg.payload={\n        success:false,\n        error:\"Non Authorizated\"\n    }\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 220,
        "y": 320,
        "wires": [
            [
                "5d2b2a8f4112cf02",
                "ac2184bfe451c4dd"
            ],
            [
                "0f6e20f89ee0ba11"
            ]
        ]
    },
    {
        "id": "5d2b2a8f4112cf02",
        "type": "function",
        "z": "26bcada27220ca80",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nmsg.payload = {\n    // email : msg.fromApp.email,\n    _id: objectid(msg.fromApp.user_id),\n    deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "bf088225134a75d0"
            ]
        ]
    },
    {
        "id": "fa23647ec8fa3e98",
        "type": "function",
        "z": "26bcada27220ca80",
        "name": "",
        "func": "node.warn(msg);\nif(msg.payload.length>0){\n    msg.fromApp.role = msg.payload[0].roles[0];\n    msg.fromApp.sessionToken = msg.payload[0].sessionToken;\n    msg.payload =msg.oldpayload; \n    \n    return [msg,null]\n}else{\n    msg.statusCode = 404\n    msg.payload = {\n        success: false,\n        error: \"Non Authorizated\"\n    }\n    return [null,msg]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 320,
        "wires": [
            [
                "7790c7889c0bd054"
            ],
            [
                "25ee405a74b14cdd",
                "7790c7889c0bd054"
            ]
        ]
    },
    {
        "id": "251a28175208a4c9",
        "type": "debug",
        "z": "26bcada27220ca80",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf088225134a75d0",
        "type": "link call",
        "z": "26bcada27220ca80",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "fa23647ec8fa3e98",
                "251a28175208a4c9"
            ]
        ]
    },
    {
        "id": "0f6e20f89ee0ba11",
        "type": "http response",
        "z": "26bcada27220ca80",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 350,
        "y": 380,
        "wires": []
    },
    {
        "id": "25ee405a74b14cdd",
        "type": "http response",
        "z": "26bcada27220ca80",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 380,
        "wires": []
    },
    {
        "id": "ac2184bfe451c4dd",
        "type": "debug",
        "z": "26bcada27220ca80",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "7790c7889c0bd054",
        "type": "debug",
        "z": "26bcada27220ca80",
        "name": "debug 343",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 220,
        "wires": []
    },
    {
        "id": "684e787e7b905226",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/signoutnew",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 540,
        "wires": [
            [
                "86945c5358607c3e",
                "b240a9a541dc6c6c"
            ]
        ]
    },
    {
        "id": "39ddbe89f3d47ce9",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 500,
        "wires": []
    },
    {
        "id": "0710c1c99ff40dd6",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 540,
        "wires": []
    },
    {
        "id": "b240a9a541dc6c6c",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 500,
        "wires": []
    },
    {
        "id": "86945c5358607c3e",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check jwt",
        "func": "msg.cookies={\n    user_token: null\n}\n\nmsg.payload={\n    success: true\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 320,
        "y": 540,
        "wires": [
            [
                "39ddbe89f3d47ce9",
                "00244933e3eac6fb"
            ]
        ]
    },
    {
        "id": "00244933e3eac6fb",
        "type": "delay",
        "z": "a57fac41b6cd215f",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 500,
        "y": 540,
        "wires": [
            [
                "0710c1c99ff40dd6"
            ]
        ]
    },
    {
        "id": "400208ab2385a1a4",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/verifyTokentest",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1110,
        "y": 1060,
        "wires": [
            [
                "ad94c6eaf40b287c",
                "10021a21ce09ab87"
            ]
        ]
    },
    {
        "id": "08ded54bba1c838e",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1830,
        "y": 1060,
        "wires": []
    },
    {
        "id": "10021a21ce09ab87",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\nmsg.cameToken = msg.payload.token;\n\nmsg.payload = {\n    verifyToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1060,
        "wires": [
            [
                "d5e535c4bf6d26a3",
                "410689155f001ac2"
            ]
        ]
    },
    {
        "id": "ad94c6eaf40b287c",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1020,
        "wires": []
    },
    {
        "id": "098fc44f441c12b5",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d5e535c4bf6d26a3",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ab9f0c60ef9c0f19",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b0ee78f9bd68b667",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 392",
        "func": "const token = crypto.randomBytes(64).toString('hex');\nmsg.token = token\n\nconst date = new Date();\nconst expireTime = date.setMinutes(date.getMinutes() + 30);\n\nmsg.statusCode = 302\nmsg.headers = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": true,\n    \"location\": `https://app.seedoo.co/ChangePassword?token=${msg.token}`\n}\n\nmsg.cookies = {\n    verify_token: null,\n    email_register: null\n}\n\nmsg.collection = \"admins\";\n\nmsg.query = {\n    _id: objectid(msg.payload[0]._id)\n}\n\nmsg.payload = {\n    $set: {\n        resetPassToken: token,\n        active: true,\n        verifyToken: null,\n        resetPassExpireToken: expireTime\n    }\n}\n\nnode.send(msg)\n\nreturn msg\n// const token = await jwt.sign(\n//     { user_id: msg.payload[0]._id, email: msg.payload[0].email },\n//     \"test\",\n//     {\n//         expiresIn: \"150m\",\n//     }\n// );\n// msg.token = token\n\n// msg.statusCode = 302\n// msg.headers = {\n//     \"Access-Control-Allow-Origin\": \"*\",\n//     \"Access-Control-Allow-Credentials\": true,\n//     \"location\" :`https://uiritman6335828aa386c31100000ae1.ubos.tech/Dashboard`\n// }\n// // msg.cookies = {};\n// // msg.cookies[\"user_token\"] = token;\n// msg.cookies={\n//     user_token:{\n//         value:msg.token,\n//         domain:\"uiritman6335828aa386c31100000ae1.ubos.tech\"\n//     },\n//     verify_token: null,\n//     email_register: null\n// }\n\n// msg.collection = \"admins\";\n// msg.query = {\n//     _id: objectid(msg.payload[0]._id)\n// }\n// msg.payload = {\n//     $set: {\n//         active: true,\n//         // verifyToken: null\n//     }\n// }\n\n// node.send(msg)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 1650,
        "y": 1060,
        "wires": [
            [
                "08ded54bba1c838e",
                "098fc44f441c12b5",
                "236248bf8ae76e74"
            ]
        ]
    },
    {
        "id": "410689155f001ac2",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1500,
        "y": 1060,
        "wires": [
            [
                "ab9f0c60ef9c0f19",
                "b0ee78f9bd68b667"
            ]
        ]
    },
    {
        "id": "236248bf8ae76e74",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1880,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "9cd157302285f860",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/loginnew",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "8c503f5d17201eaa",
                "143472c139e937de"
            ]
        ]
    },
    {
        "id": "209ee730f5ce3ae5",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 120,
        "wires": []
    },
    {
        "id": "83278870c1b7f62a",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "node.warn(msg.payload);\n\nif(msg.payload.length === 0){\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Incorrect email or password\",\n        code:401\n    }\n    node.warn(\"Email not found\");\n    return [null,msg]\n}\n\nif (msg.payload[0].active === false) {\n    msg.statusCode = 401;\n    msg.payload = {\n        data: \"Email not activated\",\n        code: 401\n    }\n    return [null, msg]\n}\n\n\n    let check = await bcrypt.compare(msg.fromApp.password, msg.payload[0].password);\n    if (!check) {\n        msg.statusCode = 401;\n        msg.payload = {\n            data: \"Incorrect email or password\",\n            code: 401\n        }\n        node.warn(\"Password incorrect\");\n        return [null, msg]\n  }\n\n\nreturn[msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 680,
        "y": 160,
        "wires": [
            [
                "3233dce2179bbcbc",
                "03d50c8ba6afc278"
            ],
            [
                "165e83f63f663012",
                "95941e0fbc6acbfb"
            ]
        ]
    },
    {
        "id": "165e83f63f663012",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 180,
        "wires": []
    },
    {
        "id": "3233dce2179bbcbc",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "jwt token",
        "func": "msg.payload = msg.payload[0]\nconst token = jwt.sign(\n    { user_id: msg.payload._id, email:msg.payload.email },\n    \"test\",\n    {\n        expiresIn: \"1400m\",\n    }\n);\nmsg.cookies = {};\nmsg.cookies[\"user_token\"] = token;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 860,
        "y": 120,
        "wires": [
            [
                "6f1ac0bc895496d1",
                "209ee730f5ce3ae5",
                "140b9e21548e6ec8"
            ]
        ]
    },
    {
        "id": "6f1ac0bc895496d1",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 80,
        "wires": []
    },
    {
        "id": "f0b41a70a55b5778",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/check_tokennew",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "9f520763dbf714d2",
                "403ca5ffc728ceb7"
            ]
        ]
    },
    {
        "id": "fd160dcb70b7459c",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 340,
        "wires": []
    },
    {
        "id": "9f520763dbf714d2",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check jwt",
        "func": "msg.check = msg.payload;\nvar decoded = jwt.verify(msg.payload.token, 'test');\nmsg.payload = decoded\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "c464b054945a0fd3",
                "b1cf094910bb0564"
            ]
        ]
    },
    {
        "id": "c464b054945a0fd3",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 280,
        "wires": []
    },
    {
        "id": "403ca5ffc728ceb7",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 280,
        "wires": []
    },
    {
        "id": "96b72c7661c3f809",
        "type": "catch",
        "z": "a57fac41b6cd215f",
        "name": "",
        "scope": [
            "9f520763dbf714d2"
        ],
        "uncaught": false,
        "x": 110,
        "y": 380,
        "wires": [
            [
                "f16ab526f638562a",
                "d5ab5a3edd11a779"
            ]
        ]
    },
    {
        "id": "f16ab526f638562a",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "msg.payload = {\n    auth: \"Unautorizate\",\n    code: 401,\n    login_id: msg.check.login_id,\n    app_id: msg.check.app_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 380,
        "wires": [
            [
                "5952d2f677bc0000",
                "768d2fe9eb7e8708"
            ]
        ]
    },
    {
        "id": "5952d2f677bc0000",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 440,
        "y": 380,
        "wires": []
    },
    {
        "id": "b1cf094910bb0564",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nmsg.payload = {\n    // email : msg.fromApp.email,\n    _id: objectid(msg.payload.user_id),\n    deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "1ca9349ff8ccca37",
                "8faf414b3a3aeaad"
            ]
        ]
    },
    {
        "id": "10ecf27cc3f2842d",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "\nif(msg.payload.length>0){\n    msg.payload = msg.payload[0]\n    msg.user = {\n        auth: \"Success\",\n        code:200,\n        user: msg.payload\n    }\n    return [msg,null]\n}else{\n    msg.payload = {\n        auth: \"Unautorizate\",\n        code: 401,\n        login_id:msg.check.login_id,\n        app_id:msg.check.app_id\n    }\n    return [null,msg]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 320,
        "wires": [
            [
                "d25d99935ed5923f",
                "cb6990ed985f211d"
            ],
            [
                "fd160dcb70b7459c",
                "ac5c0834199fe398"
            ]
        ]
    },
    {
        "id": "768d2fe9eb7e8708",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 420,
        "wires": []
    },
    {
        "id": "79585571530b06dd",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 240,
        "wires": []
    },
    {
        "id": "d5ab5a3edd11a779",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 420,
        "wires": []
    },
    {
        "id": "ac5c0834199fe398",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 380,
        "wires": []
    },
    {
        "id": "253ad4674153b1b4",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "\n\nmsg.payload = msg.payload[0]\nlet arr =   msg.payload.menu.sort(function (a, b) {\n    return +a.position - +b.position;\n});\n\nfunction sortF(sortArr){\n    sortArr.sort(function (a, b) {\n        return +a.position - +b.position;\n    });\n    return sortArr\n}\n\nlet language = msg.user.user.language\n\nif (language == \"he\"){\n    let menu = arr.map(el => {\n        if (el.isParent) {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"icon\": el.icon ? el.icon : \"\",\n                \"children\": el.childModules ? sortF(el.childModules).map(item => {\n                    return {\n                        \"label\": item.name,\n                        \"value\": item.name,\n                        \"icon\": item.icon ? item.icon : \"\"\n\n                    }\n                }) : \"\"\n            }\n        } else {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"children\": [],\n                \"icon\": el.icon ? el.icon : \"\",\n            }\n        }\n    })\n    msg.menu = menu\n} else{\n    let menu = arr.map(el => {\n        if (el.isParent) {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"icon\": el.icon ? el.icon : \"\",\n                \"children\": el.childModules ? sortF(el.childModules).map(item => {\n                    return {\n                        \"label\": item.name,\n                        \"value\": item.name,\n                        \"icon\": item.icon ? item.icon : \"\"\n\n                    }\n                }) : \"\"\n            }\n        } else {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"children\": [],\n                \"icon\": el.icon ? el.icon : \"\",\n            }\n        }\n    })\n    msg.menu = menu\n}\n\n msg.permissions = msg.payload.permissions\n// msg.statusCode = 200;\n// msg.payload = {\n//     auth: \"Success\",\n//     code: 200,\n//     user: {\n//         \"menu\":msg.menu,\n//         \"permission\": msg.permissions,\n//         \"translation\": msg.payload.translation[0],\n//         \"info\":msg.user\n//     }\n// }\n// }\n\n// else{\n//         msg.statusCode = 404;\n//         msg.payload = {\n//             data: \"The requested URL was not found.\",\n//             code: 404\n//         }\n//     // msg.statusCode = 303;\n\n//     // msg.headers = {\n//     //     Location: \"https://google.com\"\n//     // }\n//         node.warn(\"Forbiden\");\n//     //     msg.headers = {\n//     //     \"Access-Control-Allow-Origin\": \"*\",\n//     //     \"Access-Control-Allow-Credentials\": true,\n//     //     \"location\": `https://seedoadmindev63330e347f8cc21100000002.iot.seedoo.co/Error`\n//     // }\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 280,
        "wires": [
            [
                "79585571530b06dd",
                "fbe6990c053aeda2"
            ]
        ]
    },
    {
        "id": "765a73a29942eafc",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1790,
        "y": 280,
        "wires": []
    },
    {
        "id": "03d50c8ba6afc278",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "95941e0fbc6acbfb",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "err login",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 220,
        "wires": []
    },
    {
        "id": "172bbb3bbf4a02a8",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "THIS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 240,
        "wires": []
    },
    {
        "id": "8c503f5d17201eaa",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 120,
        "wires": []
    },
    {
        "id": "cb6990ed985f211d",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "get roles",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload = [\n    {\n        $match:{\n            \"_id\": ObjectId(msg.payload.roles)\n        }\n    },\n    {\n        $lookup: {\n            from: 'translation',\n            as: 'translation',\n            pipeline: [\n                {\n                    $match: {\n                        deleted: false,\n                        language: msg.user.user.language\n                    }\n                }\n            ]\n        }\n    },\n    {\n        $lookup:\n        {\n            from: \"admin_modules\",\n            localField: \"permissions.moduleId\",\n            foreignField: \"_id\",\n            as: \"menu\"\n    }\n},\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ObjectId",
                "module": "objectid"
            }
        ],
        "x": 1040,
        "y": 280,
        "wires": [
            [
                "172bbb3bbf4a02a8",
                "42db5105547a7d0a"
            ]
        ]
    },
    {
        "id": "d25d99935ed5923f",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 240,
        "wires": []
    },
    {
        "id": "7c7eaeadc0d0a457",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "msg from db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 120,
        "wires": []
    },
    {
        "id": "ce1ed264f411d7d2",
        "type": "catch",
        "z": "a57fac41b6cd215f",
        "name": "g",
        "scope": [
            "cb6990ed985f211d"
        ],
        "uncaught": false,
        "x": 1490,
        "y": 380,
        "wires": [
            [
                "f1e9173727ae1f48",
                "e89dc615aefe46b6"
            ]
        ]
    },
    {
        "id": "f1e9173727ae1f48",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 250",
        "func": "msg.payload ={\n    auth: \"Unautorizate\",\n    code: 401,\n    login_id: msg.check.login_id,\n    }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 340,
        "wires": [
            [
                "765a73a29942eafc",
                "e89dc615aefe46b6"
            ]
        ]
    },
    {
        "id": "e89dc615aefe46b6",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1790,
        "y": 380,
        "wires": []
    },
    {
        "id": "1ca9349ff8ccca37",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 280,
        "wires": []
    },
    {
        "id": "143472c139e937de",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nnode.warn(msg.fromApp)\n// msg.payload = {\n//     login: msg.fromApp.login.toLowerCase(),\n// }\nmsg.payload = [\n    {\n        $match: {\n            login: msg.fromApp.login.toLowerCase(),\n            deleted: false\n        }\n    },\n    {\n        $lookup: {\n            from: \"admin_roles\",\n            localField: \"roles\",\n            foreignField: \"_id\",\n            as: \"pages\"\n        }\n    }\n]\n// msg.action = msg.collection + \"_с\"\n// msg.target = msg.payload._id\nreturn msg;\n\n\n\n\n// msg.collection = \"admins\"\n// msg.fromApp = msg.payload\n// node.warn(msg.fromApp)\n// msg.payload = {\n//     login: msg.fromApp.login,\n//     deleted: false\n// }\n\n// msg.action = msg.collection + \"_с\"\n// msg.target = msg.payload._id\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 310,
        "y": 160,
        "wires": [
            [
                "69a395373d1b97bd",
                "fe3f2588e7e85524"
            ]
        ]
    },
    {
        "id": "69a395373d1b97bd",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "after aggregate",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "fe3f2588e7e85524",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 160,
        "wires": [
            [
                "83278870c1b7f62a",
                "7c7eaeadc0d0a457"
            ]
        ]
    },
    {
        "id": "8faf414b3a3aeaad",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 680,
        "y": 320,
        "wires": [
            [
                "10ecf27cc3f2842d",
                "44e9532ed297cf04"
            ]
        ]
    },
    {
        "id": "44e9532ed297cf04",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 310",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 280,
        "wires": []
    },
    {
        "id": "42db5105547a7d0a",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1260,
        "y": 280,
        "wires": [
            [
                "253ad4674153b1b4"
            ]
        ]
    },
    {
        "id": "fbe6990c053aeda2",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 293",
        "func": "node.warn(msg.check.page_id);\n// let currentPage = msg.payload[0].permissions.flatMap((e) => e.module).includes(msg.check.page_id)\nlet menu = msg.menu.map((el) => el.label)\n\nif (msg.check.page_id === \"User%20Management\") {\n    let page = \"User Management\"\n    let pageManagement = msg.menu.filter((e) => e.children.length > 0).flatMap((el) => el.children).map((elem) => elem.label).includes(page)\n    if (pageManagement) {\n        menu.push(\"User%20Management\")\n    }\n}\n\nlet currentPage = menu.includes(msg.check.page_id)\nlet childPage = msg.menu.filter((e) => e.children.length > 0).flatMap((el) => el.children).map((elem) => elem.label).includes(msg.check.page_id)\nnode.warn(msg.menu.filter((e) => e.children.length > 0).flatMap((el) => el.children).map((elem) => elem.label));\n\n\n\nif (currentPage || childPage || msg.check.page_id === \"SIngleAd\" || msg.check.page_id === \"DataLogs\" || msg.check.page_id === \"Graphana\") {\n    msg.statusCode = 200;\n    msg.payload = {\n        auth: \"Success\",\n        code: 200,\n        user: {\n            \"menu\": msg.menu,\n            \"permission\": msg.permissions,\n            \"translation\": msg.payload.translation[0],\n            \"info\": msg.user\n        }\n    }\n}\n\nelse {\n    // msg.statusCode = 200;\n    msg.payload = {\n        auth: \"Unautorizate\",\n        code: 401,\n        login_id: `${msg.menu[0].value}?pageName=${msg.menu[0].value}`,\n        app_id: msg.check.app_id\n    }\n\n    // msg.statusCode = 404;\n    // msg.payload = {\n    //     data: \"The requested URL was not found.\",\n    //     code: 404,\n    //     auth: \"Success\",\n    //     user: {\n    //         \"menu\": msg.menu,\n    //         \"permission\": msg.permissions,\n    //         \"translation\": msg.payload.translation[0],\n    //         \"info\": msg.user\n    //     }\n    // }\n    //     msg.statusCode = 303;\n\n    // msg.headers = {\n    //     location: \"https://google.com\"\n    // }\n\n    // msg.statusCode = 303;\n\n    // msg.headers = {\n    //     Location: \"https://google.com\"\n    // }\n    node.warn(\"Forbiden\");\n    //     msg.headers = {\n    //     \"Access-Control-Allow-Origin\": \"*\",\n    //     \"Access-Control-Allow-Credentials\": true,\n    //     \"location\": `https://seedoadmindev63330e347f8cc21100000002.iot.seedoo.co/Error`\n    // }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 280,
        "wires": [
            [
                "765a73a29942eafc",
                "bfa5ca5cfced0b9e"
            ]
        ]
    },
    {
        "id": "bfa5ca5cfced0b9e",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "Finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 240,
        "wires": []
    },
    {
        "id": "140b9e21548e6ec8",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 568",
        "func": "node.warn(msg)\nfunction uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\nvar sessionToken = uuid()\nmsg.query = { _id: objectid(msg.payload._id) }\nmsg.payload = { $set: { \"sessionToken\": sessionToken } };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1030,
        "y": 160,
        "wires": [
            [
                "38b44e14c42fac4e",
                "b66bbe5f2cd95323"
            ]
        ]
    },
    {
        "id": "38b44e14c42fac4e",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1240,
        "y": 160,
        "wires": [
            [
                "b66bbe5f2cd95323"
            ]
        ]
    },
    {
        "id": "b66bbe5f2cd95323",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "update session token",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 120,
        "wires": []
    },
    {
        "id": "fc6141db3828501b",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/queryToResetPassword",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1580,
        "wires": [
            [
                "56e78505d6f311f2",
                "554391bd20517a11"
            ]
        ]
    },
    {
        "id": "56e78505d6f311f2",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1540,
        "wires": []
    },
    {
        "id": "554391bd20517a11",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\nmsg.token = msg.payload.token;\n\nmsg.payload = {\n    resetPassToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1580,
        "wires": [
            [
                "3fa9bfa6c253999a",
                "0aacdaec1c241dc7"
            ]
        ]
    },
    {
        "id": "3fa9bfa6c253999a",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1540,
        "wires": []
    },
    {
        "id": "0aacdaec1c241dc7",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 590,
        "y": 1580,
        "wires": [
            [
                "0f1fd27be20df527",
                "5bfa0430d378ab23"
            ]
        ]
    },
    {
        "id": "0f1fd27be20df527",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "redirect to page",
        "func": "const dateNow = new Date().getTime();\n\nif (msg.payload[0].resetPassExpireToken > dateNow) {\n    msg.statusCode = 302\n    msg.headers = {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Access-Control-Allow-Credentials\": true,\n        \"location\": `https://app.seedoo.co/ChangePassword?token=${msg.token}`\n    }\n} else {\n    msg.payload = '<h1>Link expired</h1>';\n};\n\n// Will be deleted user_token:\n// msg.cookies={\n//     user_token:{\n//         value: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjM1NmJiZjJmOTVlNTMxMTAwMDAwMDEyIiwiZW1haWwiOiIxQDEuMSIsImlhdCI6MTY2NjY5NjEzNSwiZXhwIjoxNjY2NzA1MTM1fQ.s6PMOAm1b57JxHQ2SBEahd-1nRdOydQZZXg0dm7REFc\",\n//         domain:\"ubos.tech\"\n//     },\n//     reset_pass_token: {\n//         value: msg.token,\n//         domain: \"ubos.tech\"\n//     }\n// }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 760,
        "y": 1580,
        "wires": [
            [
                "36646eab63daa3de",
                "f59ecaa3400756fc"
            ]
        ]
    },
    {
        "id": "5bfa0430d378ab23",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 1540,
        "wires": []
    },
    {
        "id": "36646eab63daa3de",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1580,
        "wires": []
    },
    {
        "id": "f59ecaa3400756fc",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish queryToResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1540,
        "wires": []
    },
    {
        "id": "921cc28ece8038ad",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/sendEmailForResetPassword",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1400,
        "wires": [
            [
                "9cfdcd0a4654a3d3",
                "4dc5a0da23d0d9b9"
            ]
        ]
    },
    {
        "id": "9cfdcd0a4654a3d3",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\n\nmsg.payload = {\n    email: msg.payload.email,\n    deleted: false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1400,
        "wires": [
            [
                "aa97049dd58d6a47"
            ]
        ]
    },
    {
        "id": "4dc5a0da23d0d9b9",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1360,
        "wires": []
    },
    {
        "id": "aa97049dd58d6a47",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 650,
        "y": 1400,
        "wires": [
            [
                "e2ab5a6015a1519c",
                "93aad440ca6cf71f"
            ]
        ]
    },
    {
        "id": "e2ab5a6015a1519c",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "send response",
        "func": "if (msg.payload.length === 0){\n    msg.statusCode = 401;\n    msg.payload = {\n        \"success\": false,\n        \"error\": \"There is no user with this email!\"\n    }\n    return [null, msg]\n}\n\nmsg.payload = msg.payload[0];\n    \nreturn[msg, null]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1400,
        "wires": [
            [
                "2a359fd3093c76b6",
                "2aab0648b222d5a4"
            ],
            [
                "62604b835b0f9a38",
                "fa9c71d62ffcc827"
            ]
        ]
    },
    {
        "id": "93aad440ca6cf71f",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "Item after DB",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1360,
        "wires": []
    },
    {
        "id": "2a359fd3093c76b6",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "item",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1340,
        "wires": []
    },
    {
        "id": "2aab0648b222d5a4",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "// Add 30 minutes\nconst date = new Date();\nconst expireTime = date.setMinutes(date.getMinutes() + 30);\nconst token = crypto.randomBytes(64).toString('hex');\n\nmsg.oldpayload = msg.payload;\nmsg.token = token;\n\nmsg.collection = \"admins\";\nmsg.query = {\n    _id: objectid(msg.payload._id)\n}\nmsg.payload = {\n    $set: {\n        resetPassToken: token,\n        resetPassExpireToken: expireTime\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "crypto",
                "module": "crypto"
            }
        ],
        "x": 1010,
        "y": 1380,
        "wires": [
            [
                "f6b76b0fffabff61",
                "ce4cbf63a871ece9",
                "a08aa8373510c525"
            ]
        ]
    },
    {
        "id": "62604b835b0f9a38",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 1420,
        "wires": []
    },
    {
        "id": "fa9c71d62ffcc827",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "err email not found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1460,
        "wires": []
    },
    {
        "id": "f6b76b0fffabff61",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1300,
        "wires": []
    },
    {
        "id": "ce4cbf63a871ece9",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "msg to email",
        "func": "//const nodeRedUrl = 'testdatamanag-63330e347f8cc21100000003.iot.seedoo.co';\nconst url = `${env.get(\"datamanager\")}/queryToResetPassword?token=${msg.token}`;\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <div style=\" display: block;\" align=\"center\">\n        <img src=\"https://static.wixstatic.com/media/95e6cd_f0746dfbd9cd42b8a4267aaf1ab063a5~mv2.jpg/v1/fill/w_196,h_76,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/SEEDOO%20(2)_edited.jpg\" width=\"250\" height=\"100\">\n        <h1 style=\"text-align: center\";>We received a request to reset your password</h1>\n        <p style=\"font-size: 31px; text-align: center;\">Use the link below to set up a new password for your account. If you did not request to reset your password, ignore this email and the link will expire on its own.</p>\n         <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;font-size: 32px; font-weight: 600; color: #29e0e6;\n         text-decoration: none; border-radius: 6px; justify-content: center;\">\n        SET NEW PASSWORD\n         </a>\n    </div>\n</div>\n`;\n\n// msg.to = 'mashtaler887@meta.ua';\nmsg.to = msg.oldpayload.email;\nmsg.topic = 'Reset password';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1190,
        "y": 1380,
        "wires": [
            [
                "765b17708c752555",
                "8f68aeadf6eeaed9"
            ]
        ]
    },
    {
        "id": "a08aa8373510c525",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1220,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "8aa076b929b3e063",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1550,
        "y": 1420,
        "wires": []
    },
    {
        "id": "765b17708c752555",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish sendEmailForResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 1340,
        "wires": []
    },
    {
        "id": "cf649ac1275e97eb",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/resetPassword",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "12a69122716a22fa",
                "d409b499fd2eaeb6"
            ]
        ]
    },
    {
        "id": "12a69122716a22fa",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came resetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d409b499fd2eaeb6",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "msg.newPassword = msg.payload.password;\n\nmsg.collection = \"admins\";\nmsg.payload = {\n    resetPassToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1720,
        "wires": [
            [
                "4ad1b73c5c457103"
            ]
        ]
    },
    {
        "id": "4ad1b73c5c457103",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 550,
        "y": 1720,
        "wires": [
            [
                "e97622cd7ed9aa11",
                "650536810002bb33"
            ]
        ]
    },
    {
        "id": "e97622cd7ed9aa11",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query update pass",
        "func": "const dateNow = new Date().getTime();\nconst token = await jwt.sign(\n    { user_id: msg.payload[0]._id, email: msg.payload[0].email },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\nlet encryptedPassword = await bcrypt.hash(msg.newPassword, 10);\nmsg.oldpayload = msg.payload;\n\nif (msg.payload[0].resetPassExpireToken < dateNow) {\n    msg.payload = '<h1>link expired</h1>';\n}\n\n// msg.statusCode = 302\n// msg.headers = {\n//     \"Access-Control-Allow-Origin\": \"*\",\n//     \"Access-Control-Allow-Credentials\": true,\n//     \"Location\": `https://uiritman6335828aa386c31100000ae1.ubos.tech/Login`\n// }\n// msg.cookies = {\n//     user_token: {\n//         value: token,\n//         domain: \"ubos.tech\"\n//     }\n// }\n\nmsg.collection = \"admins\";\nmsg.query = {\n    _id: objectid(msg.payload[0]._id)\n}\nmsg.payload = {\n    $set: {\n        password: encryptedPassword,\n        resetPassToken: \"\",\n        resetPassExpireToken: null\n    }\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 730,
        "y": 1720,
        "wires": [
            [
                "5ce7b37dfd2cb6ac",
                "fdcaa7d4d2cb5106",
                "845bf2bc7c11dc3c"
            ]
        ]
    },
    {
        "id": "650536810002bb33",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1680,
        "wires": []
    },
    {
        "id": "5ce7b37dfd2cb6ac",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1680,
        "wires": []
    },
    {
        "id": "fdcaa7d4d2cb5106",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "msg to email",
        "func": "//onst uiUrl = 'app63330e347f8cc21100000002.iot.seedoo.co';\nconst url = `https://app.seedoo.co/Login`;\nconst dateChanged = new Date().toString().slice(0, 24);\nconst text = `\n\n<div style=\"padding: 10px 0; color: black;\" display: block;>\n    <div style=\" display: block;\" align=\"center\">\n    <img src=\"https://static.wixstatic.com/media/95e6cd_f0746dfbd9cd42b8a4267aaf1ab063a5~mv2.jpg/v1/fill/w_196,h_76,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/SEEDOO%20(2)_edited.jpg\" width=\"250\" height=\"100\">\n    <h1 style=\"text-align: center\" >Password changed!</h1>\n    <p style=\"font-size: 31px; text-align: center;\">\n        Your password has been changed successfully. \n        This is a confirmation that your password was changed at <b>${dateChanged}</b> by London timezone.\n        <br><br>\n        Use your new password to log in.\n    </p>\n    <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0;\n    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n    font-size: 32px;\n    font-weight: 600;\n    color: #29e0e6;\n    text-decoration: none;\n    border-radius: 6px;\n    justify-content: center;\">\n        <b>LOGIN NOW</b>\n    </a>\n    </div>\n</div>\n`;\n\n// msg.to = 'mashtaler887@meta.ua';\nmsg.to = msg.oldpayload[0].email;\nmsg.topic = 'Password changed';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 950,
        "y": 1760,
        "wires": [
            [
                "6e4c76e9e803c745",
                "e90114c56777dc26"
            ]
        ]
    },
    {
        "id": "845bf2bc7c11dc3c",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 980,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "6e4c76e9e803c745",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish sendEmailForResetPassword",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1720,
        "wires": []
    },
    {
        "id": "e90114c56777dc26",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 1800,
        "wires": []
    },
    {
        "id": "8f68aeadf6eeaed9",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 255",
        "func": "msg.payload = {\n    \"data\": \"Email has been sent successfully!\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1420,
        "wires": [
            [
                "8aa076b929b3e063"
            ]
        ]
    },
    {
        "id": "a4a4744cf2599562",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/registrationnew",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 740,
        "wires": [
            [
                "a6f9250ae2f589c6",
                "30f0bdeed83f65c6"
            ]
        ]
    },
    {
        "id": "c4d7f659dac1604a",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 800,
        "y": 780,
        "wires": []
    },
    {
        "id": "0dccbafb39bb5587",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "if (msg.payload.length > 0) {\n    msg.payload = {\n        data: \"This email address already exists\",\n        code: 400,\n    }\n    return [null, msg]\n}\nelse{\n    return [msg, null]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 740,
        "wires": [
            [
                "884ada3bf0606cad",
                "20d8719cfeece5c0"
            ],
            [
                "c4d7f659dac1604a",
                "60fa1a3675cc5b11"
            ]
        ]
    },
    {
        "id": "61de2a6df0372acd",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "registration user",
        "func": "let randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\nlet encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\nconst verifyToken = await jwt.sign(\n    { id: Math.round(Math.random()) },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\n\nmsg.cookies = {};\nmsg.cookies[\"verify_token\"] = verifyToken;\nmsg.cookies[\"email_register\"] = msg.oldpayload.email;\n\nmsg.payload = {\n    \"_id\": objectid(),\n    \"deleted\": false,\n    \"avatarColor\": randomColor,\n    \"createdAt\": new Date(),\n    \"roles\": [objectid(msg.oldpayload.role)],\n    \"active\": true,\n    \"username\": msg.oldpayload.username,\n    \"login\": msg.oldpayload.login.toLowerCase(),\n    \"email\": msg.oldpayload.email,\n    \"password\": encryptedPassword,\n    verifyToken,\n    resetPassToken: \"\",\n    resetPassExpireToken: null\n}\n\n// msg.payload = {\n//     \"_id\": objectid(),\n//     \"deleted\": false,\n//     \"avatarColor\": randomColor,\n//     \"createdAt\": new Date(),\n//     \"roles\": [objectid(\"63691dd3ecf8b000118482f6\")],\n//     \"active\": false,\n//     \"firstname\": msg.oldpayload.firstname,\n//     \"lastname\": msg.oldpayload.lastname,\n//     \"email\": msg.oldpayload.email,\n//     \"password\": encryptedPassword,\n//     verifyToken,\n//     resetPassToken: \"\",\n//     resetPassExpireToken: null\n// }\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1300,
        "y": 700,
        "wires": [
            [
                "1151813d0877854e",
                "e20bc2a250aec5b5",
                "1761232eca5266b7"
            ]
        ]
    },
    {
        "id": "884ada3bf0606cad",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 680,
        "wires": []
    },
    {
        "id": "60fa1a3675cc5b11",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "err when created user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 820,
        "wires": []
    },
    {
        "id": "a6f9250ae2f589c6",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check ",
        "func": "msg.collection = \"admins\";\nmsg.oldpayload = msg.payload;\n\nmsg.payload = {\n    email: msg.payload.email,\n    deleted: false\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "0d01225df64fe24b",
                "9a1f45593ee9d401"
            ]
        ]
    },
    {
        "id": "04bb5502e6dab604",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 700,
        "wires": []
    },
    {
        "id": "ac3b3086e25c4213",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 700,
        "wires": []
    },
    {
        "id": "d12fe958fe057e4c",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "msg to email",
        "func": "const token = msg.payload.verifyToken;\nconst url = `${env.get(\"datamanager\")}/verifyTokentest?token=${token}`;\n\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <div style=\" display: block;\" align=\"center\">\n    <img src=\"https://static.wixstatic.com/media/95e6cd_f0746dfbd9cd42b8a4267aaf1ab063a5~mv2.jpg/v1/fill/w_196,h_76,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/SEEDOO%20(2)_edited.jpg\" alt=\"logo\" width=\"250\" height='100' />\n    <h1 style=\"text-align:center;\">Thanks for sign up to Seedoo!</h1>\n    \n    <p style=\"font-size: 31px;\">Click the link below to confirm your account.</p>\n\n    <a href=\"${url}\" target=\"_blank\" \n    style=\"margin: 10px 0; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n    font-size: 32px;\n    font-weight: 600;\n    color: #29e0e6;\n    text-decoration: none;\n    border-radius: 6px;\n    justify-content: center;\">Link to confirm account!</a>\n\n    <p \n    style=\"text-align: center;\n    font-weight: 600;\n    font-size: 13px;\n    margin-top: 87px;\">If you didn't receive this email, there's nothing going out - you can ignore it.</p>\n    </div>\n</div>\n`;\n\n//msg.to = 'mashtaler887@meta.ua';\n msg.to = msg.payload.email;\nmsg.topic = 'Verify your email';\nmsg.payload = text;\n\n// const text = `\n// <div style=\"padding: 10px 0; color: black;\">\n//     <h1>Confirm Your Email Address</h1>\n//     <p>Tap the button below to confirm your email address. If you didn't create an account, you can delete this email.</p>\n//     <a href=\"${url}\" target=\"_blank\" style=\"margin: 10px 0; display: inline-block; padding: 16px 36px; font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif; font-size: 16px; color: #ffffff; text-decoration: none; border-radius: 6px; background: #95e4f0;\">Confirm</a>\n// </div>\n// `;\n\n// // msg.to = 'daniil12.com13@gmail.com';\n// msg.to = msg.payload.email;\n// msg.topic = 'Ritman verifay';\n// msg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 1530,
        "y": 660,
        "wires": [
            [
                "adefae81f6bde615",
                "6b4b24982eed4bd1"
            ]
        ]
    },
    {
        "id": "0d01225df64fe24b",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "msg to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 700,
        "wires": []
    },
    {
        "id": "adefae81f6bde615",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "msg to email",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 620,
        "wires": []
    },
    {
        "id": "1761232eca5266b7",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1860,
        "y": 700,
        "wires": []
    },
    {
        "id": "30f0bdeed83f65c6",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 700,
        "wires": []
    },
    {
        "id": "eaf657aa83fc1e60",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/repeatRegisterEmail",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "7ee1a17f090d530f",
                "a128afea6d2d024f"
            ]
        ]
    },
    {
        "id": "7ee1a17f090d530f",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "email and token",
        "func": "msg.payload = {\n    verifyToken: msg.req.cookies.verify_token,\n    email: msg.req.cookies.email_register\n}\nmsg.email = msg.req.cookies.email_register;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 920,
        "wires": [
            [
                "b4e54e101ff46945",
                "a05223da76be3824"
            ]
        ]
    },
    {
        "id": "a128afea6d2d024f",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 880,
        "wires": []
    },
    {
        "id": "a05223da76be3824",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "msg to email",
        "func": "const token = msg.payload.verifyToken;\nconst url = `${env.get(\"datamanager\")}/verifyToken?token=${token}`;\nconst text = `\n<div style=\"padding: 10px 0; color: black;\">\n    <div style=\" display: block;\" align=\"center\">\n    <img src=\"https://static.wixstatic.com/media/95e6cd_f0746dfbd9cd42b8a4267aaf1ab063a5~mv2.jpg/v1/fill/w_196,h_76,al_c,q_80,usm_0.66_1.00_0.01,enc_auto/SEEDOO%20(2)_edited.jpg\" alt=\"logo\" width=\"250\" height='100' />\n    <h1 style=\"text-align:center;\">Thanks for sign up to Seedoo!</h1>\n\n    <p style=\"font-size: 31px;\">Click the link below to confirm your account.</p>\n\n    <a href=\"${url}\" target=\"_blank\" \n    style=\"margin: 10px 0;\n    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;\n    font-size: 32px;\n    font-weight: 600;\n    color: #29e0e6;\n    text-decoration: none;\n    border-radius: 6px;\n    justify-content: center;\">Link to confirm account!</a>\n\n    <p \n    style=\"text-align: center;\n    font-weight: 600;\n    font-size: 13px;\n    margin-top: 87px;\">If you didn't receive this email, there's nothing going out - you can ignore it.</p>\n</div>\n</div>\n`;\n\n// msg.to = 'mashtaler887@meta.ua';\nmsg.to = msg.payload.email;\nmsg.topic = 'Verify your email';\nmsg.payload = text;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 590,
        "y": 920,
        "wires": [
            [
                "739e982b5fd2b494",
                "247078bcd1d3a5bd"
            ]
        ]
    },
    {
        "id": "2fb9484b0da14dae",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 960,
        "wires": []
    },
    {
        "id": "739e982b5fd2b494",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "repeat msg to email",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 880,
        "wires": []
    },
    {
        "id": "b4e54e101ff46945",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 880,
        "wires": []
    },
    {
        "id": "247078bcd1d3a5bd",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "msg to page",
        "func": "msg.payload = {\n    data: `We sent the email \"${msg.email}\" again. Please, check your inbox or spam.`\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 960,
        "wires": [
            [
                "2fb9484b0da14dae",
                "f04ac6abc92eba56"
            ]
        ]
    },
    {
        "id": "f04ac6abc92eba56",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 920,
        "wires": []
    },
    {
        "id": "20d8719cfeece5c0",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "check login",
        "func": "// msg.collection = \"admins\"\n// msg.oldpayload = msg.payload;\n// msg.payload = {\n//     login: msg.payload.username\n// }\n// return msg;\n\nmsg.collection = \"admins\"\nmsg.payload = {\n    login: msg.oldpayload.login.toLowerCase(),\n    deleted: false\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 720,
        "wires": [
            [
                "cb0ea948f4071bbf"
            ]
        ]
    },
    {
        "id": "60cf3f0e9e88aabb",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "",
        "func": "if (msg.payload.length > 0) {\n    msg.payload = {\n        data: \"This login already exists\",\n        code: 400,\n    }\n    return [null, msg]\n}\nelse {\n    return [msg, null]\n}\n\n\n\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 720,
        "wires": [
            [
                "61de2a6df0372acd",
                "ac1efb3e70066975"
            ],
            [
                "ac25ce83fdcb5003",
                "54e0b87f4101b624"
            ]
        ]
    },
    {
        "id": "ac25ce83fdcb5003",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 1140,
        "y": 760,
        "wires": []
    },
    {
        "id": "54e0b87f4101b624",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "err when created user",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 800,
        "wires": []
    },
    {
        "id": "ac1efb3e70066975",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 282",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 660,
        "wires": []
    },
    {
        "id": "42f20bb5cda90a0a",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 283",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2130,
        "y": 840,
        "wires": []
    },
    {
        "id": "6b4b24982eed4bd1",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 252",
        "func": "msg.payload = {\n    data: \"We have sent you a confirmation email. Please check your email.\",\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "34620e1eb6f8a126",
        "type": "http in",
        "z": "a57fac41b6cd215f",
        "name": "",
        "url": "/verifyToken",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1080,
        "wires": [
            [
                "bd348d0a20c5eeae",
                "c91b65b686ed2abe"
            ]
        ]
    },
    {
        "id": "7246e724d35f8df3",
        "type": "http response",
        "z": "a57fac41b6cd215f",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 850,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c91b65b686ed2abe",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "func": "msg.collection = \"admins\";\nmsg.cameToken = msg.payload.token;\n\nmsg.payload = {\n    verifyToken: msg.payload.token\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1080,
        "wires": [
            [
                "e3202e62500a396c",
                "c74a42f66cfdfef7"
            ]
        ]
    },
    {
        "id": "bd348d0a20c5eeae",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "came",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a7945689655ab7a3",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "finish",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1040,
        "wires": []
    },
    {
        "id": "e3202e62500a396c",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "query to db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d3e50aecd5556b7f",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "res db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1040,
        "wires": []
    },
    {
        "id": "953dd7d33a929252",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 254",
        "func": "const token = await jwt.sign(\n    { user_id: msg.payload[0]._id, email: msg.payload[0].email },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\nmsg.token = token\n\nmsg.statusCode = 302\nmsg.headers = {\n    \"Access-Control-Allow-Origin\": \"*\",\n    \"Access-Control-Allow-Credentials\": true,\n    \"location\": `https://app.seedoo.co/Login`\n}\n// msg.cookies = {};\n// msg.cookies[\"user_token\"] = token;\nmsg.cookies = {\n    user_token: {\n        value: msg.token,\n        domain: \"app.seedoo.co\"\n    },\n    verify_token: null,\n    email_register: null\n}\n\nmsg.collection = \"admins\";\nmsg.query = {\n    _id: objectid(msg.payload[0]._id)\n}\nmsg.payload = {\n    $set: {\n        active: true,\n        verifyToken: null\n    }\n}\n\nnode.send(msg)\n\n\n// const token = await jwt.sign(\n//     { user_id: msg.payload[0]._id, email: msg.payload[0].email },\n//     \"test\",\n//     {\n//         expiresIn: \"150m\",\n//     }\n// );\n// msg.token = token\n\n// msg.statusCode = 302\n// msg.headers = {\n//     \"Access-Control-Allow-Origin\": \"*\",\n//     \"Access-Control-Allow-Credentials\": true,\n//     \"location\" :`https://uiritman6335828aa386c31100000ae1.ubos.tech/Dashboard`\n// }\n// // msg.cookies = {};\n// // msg.cookies[\"user_token\"] = token;\n// msg.cookies={\n//     user_token:{\n//         value:msg.token,\n//         domain:\"uiritman6335828aa386c31100000ae1.ubos.tech\"\n//     },\n//     verify_token: null,\n//     email_register: null\n// }\n\n// msg.collection = \"admins\";\n// msg.query = {\n//     _id: objectid(msg.payload[0]._id)\n// }\n// msg.payload = {\n//     $set: {\n//         active: true,\n//         // verifyToken: null\n//     }\n// }\n\n// node.send(msg)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 690,
        "y": 1080,
        "wires": [
            [
                "7246e724d35f8df3",
                "a7945689655ab7a3",
                "8636502bcbe7a84f"
            ]
        ]
    },
    {
        "id": "c74a42f66cfdfef7",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 1080,
        "wires": [
            [
                "d3e50aecd5556b7f",
                "953dd7d33a929252"
            ]
        ]
    },
    {
        "id": "8636502bcbe7a84f",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 900,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "9a1f45593ee9d401",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 480,
        "y": 740,
        "wires": [
            [
                "0dccbafb39bb5587",
                "04bb5502e6dab604"
            ]
        ]
    },
    {
        "id": "cb0ea948f4071bbf",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 980,
        "y": 720,
        "wires": [
            [
                "60cf3f0e9e88aabb"
            ]
        ]
    },
    {
        "id": "e20bc2a250aec5b5",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1520,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4978255e3504130a",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 299",
        "func": "node.warn(msg.permission);\nfunction uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\n\nlet permission = JSON.stringify(msg.permission)\n\nvar id = uuid();\n\nmsg.payload = `INSERT INTO campaign_users(user_id, campain_id, permission, budget)\nVALUES ('${msg.user_id}', '${id}', '${permission}', '${msg.oldpayload.campaign_budget}')`\n\nmsg.te = permission\nmsg.campaign_id = id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2070,
        "y": 760,
        "wires": [
            [
                "d33ce136492ea8fc",
                "42f20bb5cda90a0a",
                "2a7ca806fde71856"
            ]
        ]
    },
    {
        "id": "d33ce136492ea8fc",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "function 300",
        "func": "node.warn(msg)\nmsg.payload = `INSERT INTO campaign(campain_id, campain_name, budget)\nVALUES ('${msg.campaign_id}', '${msg.oldpayload.campaign_name}', ${msg.oldpayload.campaign_budget})`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 760,
        "wires": [
            [
                "3f7718c9f2b8f802",
                "87eeab97f5622519"
            ]
        ]
    },
    {
        "id": "3f7718c9f2b8f802",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 341",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2470,
        "y": 720,
        "wires": []
    },
    {
        "id": "1151813d0877854e",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "find by id",
        "func": "if (msg.oldpayload.role === '64535329b94d9f001179d74b'){\nmsg.collection = \"admin_roles\"\nmsg.user_id = msg.payload._id\nmsg.payload = {\n    \"_id\": objectid(msg.payload.roles[0])\n}\n    return [msg, null]\n}\nelse {\n    return [null, msg]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1520,
        "y": 780,
        "wires": [
            [
                "c943d473b38cac86"
            ],
            [
                "d2fae0fb7c0a39a4"
            ]
        ]
    },
    {
        "id": "c943d473b38cac86",
        "type": "link call",
        "z": "a57fac41b6cd215f",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1700,
        "y": 760,
        "wires": [
            [
                "5883a65d285fc0d0"
            ]
        ]
    },
    {
        "id": "5883a65d285fc0d0",
        "type": "function",
        "z": "a57fac41b6cd215f",
        "name": "return permissions",
        "func": "msg.permission = msg.payload.flatMap((elem) => {\n return elem.permissions\n})\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 760,
        "wires": [
            [
                "4978255e3504130a"
            ]
        ]
    },
    {
        "id": "d2fae0fb7c0a39a4",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 3753",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 840,
        "wires": []
    },
    {
        "id": "2a7ca806fde71856",
        "type": "postgres",
        "z": "a57fac41b6cd215f",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 2240,
        "y": 800,
        "wires": [
            [
                "b6a0d41b3388cf3e"
            ]
        ]
    },
    {
        "id": "87eeab97f5622519",
        "type": "postgres",
        "z": "a57fac41b6cd215f",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 2440,
        "y": 760,
        "wires": [
            [
                "2f51b9e76736df76"
            ]
        ]
    },
    {
        "id": "b6a0d41b3388cf3e",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 3754",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 800,
        "wires": []
    },
    {
        "id": "2f51b9e76736df76",
        "type": "debug",
        "z": "a57fac41b6cd215f",
        "name": "debug 3755",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2610,
        "y": 760,
        "wires": []
    },
    {
        "id": "f0c5dc654e8e142e",
        "type": "link in",
        "z": "fd22afc886f3ef76",
        "name": "mongo Find",
        "links": [],
        "x": 135,
        "y": 120,
        "wires": [
            [
                "df3ec2c2f0133d7f"
            ]
        ]
    },
    {
        "id": "e48ff87224483306",
        "type": "link out",
        "z": "fd22afc886f3ef76",
        "name": "link out 1",
        "mode": "return",
        "links": [],
        "x": 855,
        "y": 120,
        "wires": []
    },
    {
        "id": "df3ec2c2f0133d7f",
        "type": "mongodb in",
        "z": "fd22afc886f3ef76",
        "mongodb": "b5ef6c18b762a1a5",
        "name": "",
        "collection": "",
        "operation": "find",
        "x": 500,
        "y": 120,
        "wires": [
            [
                "e48ff87224483306"
            ]
        ]
    },
    {
        "id": "8fc1ff99ab8dc60c",
        "type": "link in",
        "z": "fd22afc886f3ef76",
        "name": "mongo Aggregate",
        "links": [],
        "x": 135,
        "y": 200,
        "wires": [
            [
                "17848dc92e8794a2"
            ]
        ]
    },
    {
        "id": "0bee5de80103da7b",
        "type": "link out",
        "z": "fd22afc886f3ef76",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 855,
        "y": 200,
        "wires": []
    },
    {
        "id": "17848dc92e8794a2",
        "type": "mongodb in",
        "z": "fd22afc886f3ef76",
        "mongodb": "b5ef6c18b762a1a5",
        "name": "",
        "collection": "",
        "operation": "aggregate",
        "x": 510,
        "y": 200,
        "wires": [
            [
                "0bee5de80103da7b"
            ]
        ]
    },
    {
        "id": "3e6cfa0eebe89fec",
        "type": "mongodb out",
        "z": "fd22afc886f3ef76",
        "mongodb": "b5ef6c18b762a1a5",
        "name": "",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "insert",
        "x": 510,
        "y": 320,
        "wires": []
    },
    {
        "id": "ed5caba1b7b9f862",
        "type": "link in",
        "z": "fd22afc886f3ef76",
        "name": "mongo Insert",
        "links": [],
        "x": 135,
        "y": 320,
        "wires": [
            [
                "3e6cfa0eebe89fec"
            ]
        ]
    },
    {
        "id": "ad39cc2668b08129",
        "type": "mongodb out",
        "z": "fd22afc886f3ef76",
        "mongodb": "b5ef6c18b762a1a5",
        "name": "",
        "collection": "",
        "payonly": true,
        "upsert": true,
        "multi": false,
        "operation": "update",
        "x": 510,
        "y": 380,
        "wires": []
    },
    {
        "id": "fa4c26274360af74",
        "type": "link in",
        "z": "fd22afc886f3ef76",
        "name": "mongo Update",
        "links": [],
        "x": 135,
        "y": 380,
        "wires": [
            [
                "ad39cc2668b08129"
            ]
        ]
    },
    {
        "id": "2c600da74d26f411",
        "type": "mongodb out",
        "z": "fd22afc886f3ef76",
        "mongodb": "b5ef6c18b762a1a5",
        "name": "",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": true,
        "operation": "update",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "506b702386f33bd1",
        "type": "link in",
        "z": "fd22afc886f3ef76",
        "name": "mongo Update",
        "links": [],
        "x": 155,
        "y": 480,
        "wires": [
            [
                "2c600da74d26f411"
            ]
        ]
    },
    {
        "id": "a07384419598e9c7",
        "type": "http response",
        "z": "98bdf776d7929776",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 3440,
        "wires": []
    },
    {
        "id": "65d55f372441c4af",
        "type": "link call",
        "z": "98bdf776d7929776",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 3400,
        "wires": [
            []
        ]
    },
    {
        "id": "89be80faa2968f9b",
        "type": "http in",
        "z": "98bdf776d7929776",
        "name": "",
        "url": "/addModuleToRoleOld",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1100,
        "y": 1200,
        "wires": [
            [
                "92fb9083694ce33f",
                "911abea3e83a37f5"
            ]
        ]
    },
    {
        "id": "47c5e559da46e4b7",
        "type": "http response",
        "z": "98bdf776d7929776",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1450,
        "y": 1240,
        "wires": []
    },
    {
        "id": "9bf507d718672ad3",
        "type": "link call",
        "z": "98bdf776d7929776",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1480,
        "y": 1200,
        "wires": [
            [
                "92fb9083694ce33f"
            ]
        ]
    },
    {
        "id": "92fb9083694ce33f",
        "type": "debug",
        "z": "98bdf776d7929776",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 1160,
        "wires": []
    },
    {
        "id": "911abea3e83a37f5",
        "type": "function",
        "z": "98bdf776d7929776",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\n\nlet crud = {\n    \"canCreate\": false,\n    \"canRead\": false,\n    \"canEdit\": false,\n    \"canRemove\": false\n}\n\nmsg.payload.options.map(e => {\n    if (e == \"C\") {\n        crud.canCreate = true\n    }\n    else if (e == \"R\") {\n        crud.canRead = true\n    }\n    else if (e == \"U\") {\n        crud.canEdit = true\n    } else if (e == \"D\") {\n        crud.canRemove = true\n    }\n})\n\nlet modules = msg.payload.moduleName.map((name, index) => {\n    return {\n        \"name\": name,\n        \"value\": msg.payload.moduleValue[index]\n    }\n})\n\nlet preparedModules\n    = modules.map(item => {\n        return {\n            module: item.name,\n            moduleId: objectid(item.value),\n            ...crud\n        }\n    })\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n}\n\nmsg.payload = {\n        $addToSet: {\n            permissions: {\n                $each: [...preparedModules]\n            }\n        }\n}\n\nmsg.action = msg.collection + \"_с\"\nmsg.target = msg.payload._id\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1300,
        "y": 1200,
        "wires": [
            [
                "47c5e559da46e4b7",
                "9bf507d718672ad3",
                "92fb9083694ce33f"
            ]
        ]
    },
    {
        "id": "ce613a1ab9a4c802",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "url": "/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 140,
        "wires": [
            [
                "83dcd66fc1c9ac85",
                "aa05fbe63e086c25"
            ]
        ]
    },
    {
        "id": "d5977d50e50ebe58",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "url": "/registration",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 380,
        "wires": [
            [
                "945aab7964ca11d0",
                "09ed6db380e98e1f"
            ]
        ]
    },
    {
        "id": "09ed6db380e98e1f",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "check",
        "func": "msg.collection=\"admins\"\nmsg.fromApp = msg.payload\nmsg.payload = {\n    login : msg.fromApp.login\n}\nnode.warn(msg.fromApp);\nmsg.action = msg.collection + \"_с\"\nmsg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "9f055f2d04b14a02"
            ]
        ]
    },
    {
        "id": "945aab7964ca11d0",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 340,
        "wires": []
    },
    {
        "id": "e43289aae23a430c",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1390,
        "y": 360,
        "wires": []
    },
    {
        "id": "d8765175ff1b8063",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "if(msg.payload.length>0){\n    msg.payload = {\n        data: \"login is already in use \",\n        code:400\n    }\n    return [null,msg]\n}\nreturn[msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 380,
        "wires": [
            [
                "763e88a17c9b43ea"
            ],
            [
                "dff022148f7953ca"
            ]
        ]
    },
    {
        "id": "dff022148f7953ca",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 400,
        "wires": []
    },
    {
        "id": "763e88a17c9b43ea",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "\nlet encryptedPassword = await bcrypt.hash(msg.fromApp.password, 10);\nmsg.payload ={\n    email: msg.fromApp.email,\n    password: encryptedPassword,\n    createdAt: new Date((new Date().toISOString())),\n    username:msg.fromApp.username,\n    active:true,\n    deleted:false,\n    login: msg.fromApp.login.toLowerCase(),\n    language: msg.fromApp.language\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 1040,
        "y": 360,
        "wires": [
            [
                "2cd3feac44192156",
                "a3be897a9bd2ae8d",
                "84d896ccb2876d90"
            ]
        ]
    },
    {
        "id": "2cd3feac44192156",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "msg.payload = {\n    data: \"Success\",\n    code: 200,\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 360,
        "wires": [
            [
                "e43289aae23a430c"
            ]
        ]
    },
    {
        "id": "83dcd66fc1c9ac85",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nnode.warn(msg.fromApp)\n// msg.payload = {\n//     login: msg.fromApp.login.toLowerCase(),\n// }\nmsg.payload = [\n    {\n        $match: {\n            login: msg.fromApp.login.toLowerCase()\n        }\n    },\n    {\n        $lookup: {\n            from: \"admin_roles\",\n            localField: \"roles\",\n            foreignField: \"_id\",\n            as: \"pages\"\n        }\n    }\n]\n// msg.action = msg.collection + \"_с\"\n// msg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "c3ca290848a8f565",
                "e97aa3d260589450"
            ]
        ]
    },
    {
        "id": "39024dce03bbf721",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1110,
        "y": 100,
        "wires": []
    },
    {
        "id": "2107ae381216ea1a",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "node.warn(msg.payload);\n\nif(msg.payload.length == 0){\n    msg.payload = {\n        data: \"Wrong login\",\n        code:401\n    }\n    return [null,msg]\n}\nlet check = await bcrypt.compare(msg.fromApp.password, msg.payload[0].password);\nif (!check){\n    msg.payload = {\n        data: \"Wrong password\",\n        code: 401\n    }\n    return [null, msg]\n}\nreturn[msg,null]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 780,
        "y": 140,
        "wires": [
            [
                "f725caabe8647a62",
                "6cf7eec3c9697575"
            ],
            [
                "231e7687a407c538",
                "79e3bdc1637cd283"
            ]
        ]
    },
    {
        "id": "231e7687a407c538",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "401",
        "headers": {},
        "x": 960,
        "y": 160,
        "wires": []
    },
    {
        "id": "6cf7eec3c9697575",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "msg.payload = msg.payload[0]\nnode.warn(msg.payload);\n\nconst token = jwt.sign(\n    { user_id: msg.payload._id, email:msg.payload.email },\n    \"test\",\n    {\n        expiresIn: \"150m\",\n    }\n);\nmsg.cookies = {};\nmsg.cookies[\"user_token\"] = token;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 940,
        "y": 100,
        "wires": [
            [
                "39024dce03bbf721",
                "d86476937155ebbc"
            ]
        ]
    },
    {
        "id": "d86476937155ebbc",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 60,
        "wires": []
    },
    {
        "id": "7d42b25738b37bcc",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "url": "/check_token",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 600,
        "wires": [
            [
                "1fe6725a94a7c6bc",
                "80081aa9ffcf7ce1"
            ]
        ]
    },
    {
        "id": "3578f99d60af9bc1",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 620,
        "wires": []
    },
    {
        "id": "1fe6725a94a7c6bc",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "check jwt",
        "func": "msg.check = msg.payload;\nvar decoded = jwt.verify(msg.payload.token, 'test');\nmsg.payload = decoded\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "96239d3f5ca2c84b",
                "2076bd58b1bbd608"
            ]
        ]
    },
    {
        "id": "96239d3f5ca2c84b",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 560,
        "wires": []
    },
    {
        "id": "80081aa9ffcf7ce1",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "Checker",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 560,
        "wires": []
    },
    {
        "id": "e914dc7611910b72",
        "type": "catch",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "scope": [
            "1fe6725a94a7c6bc"
        ],
        "uncaught": false,
        "x": 90,
        "y": 660,
        "wires": [
            [
                "7e6e0f9c164caa8a",
                "ca4e701a6f11738a"
            ]
        ]
    },
    {
        "id": "7e6e0f9c164caa8a",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "msg.payload = {\n    auth: \"Unautorizate\",\n    code: 401,\n    login_id: msg.check.login_id,\n    app_id: msg.check.app_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 660,
        "wires": [
            [
                "9c57e8f5d4c1211f",
                "b30e0b3c7d2ca378"
            ]
        ]
    },
    {
        "id": "9c57e8f5d4c1211f",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 420,
        "y": 660,
        "wires": []
    },
    {
        "id": "2076bd58b1bbd608",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "check",
        "func": "msg.collection = \"admins\"\nmsg.fromApp = msg.payload\nmsg.payload = {\n    // email : msg.fromApp.email,\n    _id: objectid(msg.fromApp.user_id),\n    // deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "038e28c98de9c400",
                "02030a3a8bea96cd"
            ]
        ]
    },
    {
        "id": "6417b0dc97774de7",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "\nif(msg.payload.length>0){\n    msg.payload = msg.payload[0]\n    msg.user = {\n        auth: \"Success\",\n        code:200,\n        user: msg.payload\n    }\n    return [msg,null]\n}else{\n    msg.payload = {\n        auth: \"Unautorizate\",\n        code: 401,\n        login_id:msg.check.login_id,\n        app_id:msg.check.app_id\n    }\n    return [null,msg]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 600,
        "wires": [
            [
                "7b08d554ef93d33d",
                "f85e07b8d78a44eb"
            ],
            [
                "3578f99d60af9bc1"
            ]
        ]
    },
    {
        "id": "b30e0b3c7d2ca378",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 700,
        "wires": []
    },
    {
        "id": "4d50c91609cc50b1",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 580,
        "wires": []
    },
    {
        "id": "ca4e701a6f11738a",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 700,
        "wires": []
    },
    {
        "id": "757d1afef4aa575e",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 560,
        "wires": []
    },
    {
        "id": "a3be897a9bd2ae8d",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 320,
        "wires": []
    },
    {
        "id": "2ba08337a88c1175",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "msg.payload = msg.payload[0]\nlet arr =   msg.payload.menu.sort(function (a, b) {\n    return +a.position - +b.position;\n});\n\nfunction sortF(sortArr){\n    sortArr.sort(function (a, b) {\n        return +a.position - +b.position;\n    });\n    return sortArr\n}\n\nlet language = msg.user.user.language\n\nif (language == \"he\"){\n    let menu = arr.map(el => {\n        if (el.isParent) {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"icon\": el.icon ? el.icon : \"\",                \n                \"children\": el.childModules ? sortF(el.childModules).map(item => {\n                    return {\n                        \"label\": item.name,\n                        \"value\": item.name,\n                        \"icon\": item.icon ? item.icon : \"\"\n\n                    }\n                }) : \"\"\n            }\n        } else {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                // \"children\": [],\n                \"icon\": el.icon ? el.icon : \"\"\n              \n            }\n        }\n    })\n    msg.menu = menu\n} else{\n    let menu = arr.map(el => {\n        if (el.isParent) {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                \"icon\": el.icon ? el.icon : \"\",                \n                \"children\": el.childModules ? sortF(el.childModules).map(item => {\n                    return {\n                        \"label\": item.name,\n                        \"value\": item.name,\n                        \"icon\": item.icon ? item.icon : \"\"\n\n                    }\n                }) : \"\"\n            }\n        } else {\n            return {\n                \"label\": el.name,\n                \"value\": el.name,\n                // \"children\": [],\n                \"icon\": el.icon ? el.icon : \"\",\n                \n            }\n        }\n    })\n    msg.menu = menu\n}\n\nmsg.permissions = msg.payload.permissions\nmsg.payload = {\n    auth: \"Success\",\n    code: 200,\n    user: {\n        \"menu\":msg.menu,\n        \"permission\": msg.permissions,\n        \"translation\": msg.payload.translation[0],\n        \"info\":msg.user\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 580,
        "wires": [
            [
                "482f6c6a6c9d6e4a",
                "4d50c91609cc50b1"
            ]
        ]
    },
    {
        "id": "482f6c6a6c9d6e4a",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1590,
        "y": 540,
        "wires": []
    },
    {
        "id": "f725caabe8647a62",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "79e3bdc1637cd283",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "e97aa3d260589450",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 140,
        "wires": [
            [
                "412b9b1ee80dbbf1",
                "2107ae381216ea1a"
            ]
        ]
    },
    {
        "id": "9f055f2d04b14a02",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 640,
        "y": 380,
        "wires": [
            [
                "d8765175ff1b8063"
            ]
        ]
    },
    {
        "id": "84d896ccb2876d90",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1210,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "0f84ecbdb3991932",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 790,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "7e6d8ae51667beb0",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1200,
        "y": 580,
        "wires": [
            [
                "2ba08337a88c1175",
                "4ea6dbc00d23dab8"
            ]
        ]
    },
    {
        "id": "4ea6dbc00d23dab8",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "THIS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 520,
        "wires": []
    },
    {
        "id": "aa05fbe63e086c25",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "1ae19061415b0ead",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "url": "/signout",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "bff4ca8b25fca2c7",
                "995142185ee6101c"
            ]
        ]
    },
    {
        "id": "c86ef6b2f9c654aa",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "Checker SignOut",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 240,
        "wires": []
    },
    {
        "id": "d53c896c09832cee",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 280,
        "wires": []
    },
    {
        "id": "995142185ee6101c",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "Checker SignOut",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 240,
        "wires": []
    },
    {
        "id": "bff4ca8b25fca2c7",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "check jwt",
        "func": "msg.cookies={\n    user_token: \"\"\n}\n\nmsg.payload={\n    success: true\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jwt",
                "module": "jsonwebtoken"
            }
        ],
        "x": 340,
        "y": 280,
        "wires": [
            [
                "c86ef6b2f9c654aa",
                "d53c896c09832cee"
            ]
        ]
    },
    {
        "id": "27c892cb4a5efda5",
        "type": "inject",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 460,
        "wires": [
            [
                "98ecc6557d063730"
            ]
        ]
    },
    {
        "id": "db42d5f7dfd38bd8",
        "type": "mongodb in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "mongodb": "3515127ffe97c22a",
        "name": "",
        "collection": "admins",
        "operation": "find",
        "x": 490,
        "y": 460,
        "wires": [
            [
                "53652c487cff3371"
            ]
        ]
    },
    {
        "id": "53652c487cff3371",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 460,
        "wires": []
    },
    {
        "id": "98ecc6557d063730",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "func": "msg.payload = {\n    _id: objectid(\"630c861a06d8e3120000dbf5\")\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "db42d5f7dfd38bd8"
            ]
        ]
    },
    {
        "id": "287d51ef25bb705e",
        "type": "delay",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 520,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "f85e07b8d78a44eb",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "get roles",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload = [\n    {\n        $match:{\n            \"_id\": ObjectId(msg.payload.roles)\n        }\n    },\n    {\n        $lookup: {\n            from: 'translation',\n            as: 'translation',\n            pipeline: [\n                {\n                    $match: {\n                        deleted: false,\n                        language: msg.user.user.language\n                    }\n                }\n            ]\n        }\n    },\n    {\n        $lookup:\n        {\n            from: \"admin_modules\",\n            localField: \"permissions.moduleId\",\n            foreignField: \"_id\",\n            as: \"menu\"\n    }\n},\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ObjectId",
                "module": "objectid"
            }
        ],
        "x": 960,
        "y": 580,
        "wires": [
            [
                "7e6d8ae51667beb0",
                "49d4900c741813e0"
            ]
        ]
    },
    {
        "id": "7b08d554ef93d33d",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 540,
        "wires": []
    },
    {
        "id": "d57418f8cd0766c8",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "function 49",
        "func": "function uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\nvar sessionToken = uuid()\nmsg.query = { _id: objectid(msg.payload._id) }\nmsg.payload = { $set: { \"sessionToken\": sessionToken } };\nglobal.set(\"sessionToken\", sessionToken)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 1450,
        "y": 140,
        "wires": [
            [
                "ad5fd8483cecbff0",
                "9d3fc81648c3397b"
            ]
        ]
    },
    {
        "id": "ad5fd8483cecbff0",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "sessionToken",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 60,
        "wires": []
    },
    {
        "id": "9d3fc81648c3397b",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "038e28c98de9c400",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 560,
        "wires": []
    },
    {
        "id": "02030a3a8bea96cd",
        "type": "mongodb in",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "mongodb": "3515127ffe97c22a",
        "name": "",
        "collection": "",
        "operation": "find",
        "x": 630,
        "y": 600,
        "wires": [
            [
                "757d1afef4aa575e",
                "6417b0dc97774de7"
            ]
        ]
    },
    {
        "id": "c3ca290848a8f565",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 80,
        "wires": []
    },
    {
        "id": "412b9b1ee80dbbf1",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "49d4900c741813e0",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "26b1192b9582966c",
        "name": "debug 193",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 540,
        "wires": []
    },
    {
        "id": "9ad63f5ab7422996",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/createParentModule",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1680,
        "wires": [
            [
                "c355943846de0823",
                "ff8ed04a2729e776",
                "218bf1fbac5a65a9"
            ]
        ]
    },
    {
        "id": "c355943846de0823",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 390,
        "y": 1720,
        "wires": []
    },
    {
        "id": "ff8ed04a2729e776",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "func": "msg.collection = \"admin_modules\"\nmsg.payload.deleted=false;\nmsg.payload.isParent=true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1680,
        "wires": [
            [
                "c15a37dc9e05fee9",
                "218bf1fbac5a65a9"
            ]
        ]
    },
    {
        "id": "23d0402206424164",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/getModules",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2500,
        "wires": [
            [
                "13fccd6aadbc8493",
                "df99b0731a55e82b"
            ]
        ]
    },
    {
        "id": "1df2e6cae6324b5d",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 2500,
        "wires": []
    },
    {
        "id": "13fccd6aadbc8493",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "func": "msg.collection=\"admin_modules\"\nmsg.payload={\n    deleted:false\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2500,
        "wires": [
            [
                "29d8eb2c13cdeca2",
                "df99b0731a55e82b"
            ]
        ]
    },
    {
        "id": "5df40dc7d6b9453a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/createChildModule",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1880,
        "wires": [
            [
                "4fa1a49b1afb8a6e"
            ]
        ]
    },
    {
        "id": "91e885ac872a2cdf",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 1880,
        "wires": []
    },
    {
        "id": "4fa1a49b1afb8a6e",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "func": "if (msg.payload.parentModule){\n    msg.collection =\"admin_modules\"\n    \n    msg.query={\n        \"_id\": objectid(msg.payload.parentModule)\n    };\n    msg.payload={\n        $addToSet:{\n            childModules:{\n                name:msg.payload.childModule,\n                // page_id:objectid(msg.payload.childModule.value)\n                page_id: msg.payload.childModule,\n                // nameInHebrew: msg.payload.nameInHebrew,\n                // nameInEnglish: msg.payload.nameInEnglish,\n                position: msg.payload.position\n            }\n        }\n    }\n\nreturn [msg,];\n}\nelse{\n    msg.collection = \"admin_modules\"\n    msg.payload={\n        deleted:false,\n        isParent:false,\n        name:msg.payload.childModule,\n        // page_id: objectid(msg.payload.childModule.value)\n        page_id: msg.payload.childModule,\n        // nameInHebrew: msg.payload.nameInHebrew,\n        // nameInEnglish: msg.payload.nameInEnglish\n    }\n    return [,msg];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 380,
        "y": 1880,
        "wires": [
            [
                "039fd114b54b9778",
                "91e885ac872a2cdf"
            ],
            [
                "0db0ac679ce2027b",
                "91e885ac872a2cdf"
            ]
        ]
    },
    {
        "id": "83bf0f22f122688a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/ParentModule",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1800,
        "wires": [
            [
                "f0bd0ad4ad86c733"
            ]
        ]
    },
    {
        "id": "f0bd0ad4ad86c733",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "func": "msg.collection = \"admin_modules\"\nmsg.id = objectid(msg.payload.id)\nmsg.query = {\n    \"_id\":msg.id\n}\nmsg.payload = {\n    $set :{\n        icon:msg.payload.icon,\n        position:msg.payload.position,\n        nameInHebrew: msg.payload.nameInHebrew,\n        nameInEnglish: msg.payload.nameInEnglish\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 1800,
        "wires": [
            [
                "f725875202ae2f7f",
                "9f75ba6d803b5207"
            ]
        ]
    },
    {
        "id": "f725875202ae2f7f",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "success",
        "func": "msg.payload = {\n    success:true\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1780,
        "wires": [
            [
                "3f270dcd44313da5",
                "c8f29a3e069d9619"
            ]
        ]
    },
    {
        "id": "3f270dcd44313da5",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 1780,
        "wires": []
    },
    {
        "id": "fdcda7640999ec2c",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/removeChildModule",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 2060,
        "wires": [
            [
                "a19200861a67180d",
                "61510b81b0c39df8"
            ]
        ]
    },
    {
        "id": "a19200861a67180d",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "func": "msg.collection=\"admin_modules\"\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n};\nmsg.payload = {\n    $pull: {\n        \"childModules\": {\n            \"name\": msg.payload.childModule_id\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 400,
        "y": 2060,
        "wires": [
            [
                "e0085bdfe0b34fb2",
                "e7a81447db7c6fdd",
                "61510b81b0c39df8"
            ]
        ]
    },
    {
        "id": "e7a81447db7c6fdd",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 570,
        "y": 2020,
        "wires": []
    },
    {
        "id": "29d8eb2c13cdeca2",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 2500,
        "wires": [
            [
                "1df2e6cae6324b5d",
                "df99b0731a55e82b"
            ]
        ]
    },
    {
        "id": "e0085bdfe0b34fb2",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 600,
        "y": 2060,
        "wires": [
            []
        ]
    },
    {
        "id": "0db0ac679ce2027b",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 550,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "039fd114b54b9778",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "9f75ba6d803b5207",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 500,
        "y": 1820,
        "wires": [
            []
        ]
    },
    {
        "id": "c15a37dc9e05fee9",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 570,
        "y": 1680,
        "wires": [
            [
                "218bf1fbac5a65a9"
            ]
        ]
    },
    {
        "id": "34a9ffbc8bbfd214",
        "type": "inject",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2460,
        "wires": [
            [
                "13fccd6aadbc8493"
            ]
        ]
    },
    {
        "id": "61510b81b0c39df8",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 2100,
        "wires": []
    },
    {
        "id": "84f0f02da51d773f",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 2000,
        "wires": []
    },
    {
        "id": "6a53a0dae9677b3e",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 1960,
        "wires": [
            [
                "d2b447303af2add4"
            ]
        ]
    },
    {
        "id": "d2b447303af2add4",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1960,
        "wires": []
    },
    {
        "id": "c8f29a3e069d9619",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1740,
        "wires": []
    },
    {
        "id": "32dbb6086d3a27ce",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/updateChildModule",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1960,
        "wires": [
            [
                "1043c929fc557c7f",
                "d7080591809d92e5",
                "84f0f02da51d773f"
            ]
        ]
    },
    {
        "id": "1043c929fc557c7f",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "function 19",
        "func": "msg.collection = \"admin_modules\"\nmsg.query = {\n    \"_id\": objectid(msg.payload._id),\n    \"childModules.name\": msg.payload.name\n};\nmsg.payload = {\n    $set: {\n        \"childModules.$.nameInHebrew\": msg.payload.nameInHebrew,\n        \"childModules.$.nameInEnglish\": msg.payload.nameInEnglish,\n        \"childModules.$.position\": msg.payload.position\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 390,
        "y": 1960,
        "wires": [
            [
                "6a53a0dae9677b3e"
            ]
        ]
    },
    {
        "id": "d7080591809d92e5",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 370,
        "y": 1920,
        "wires": []
    },
    {
        "id": "218bf1fbac5a65a9",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1640,
        "wires": []
    },
    {
        "id": "df99b0731a55e82b",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 2460,
        "wires": []
    },
    {
        "id": "1d438df15537b644",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "506b702386f33bd1"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 2340,
        "wires": [
            [
                "4ed4df62196d54ca"
            ]
        ]
    },
    {
        "id": "67a3b3c3c74375ac",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "function 250",
        "func": "msg.collection = \"admin_modules\"\nmsg.query = {\n    _id: objectid(msg.payload._id)\n}\n\nmsg.payload = {\n    $set: {\n        name: msg.payload.name,\n        icon: msg.payload.icon\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 2380,
        "wires": [
            [
                "5ad538f143332e49",
                "b28fcbe36785a21e",
                "e467c152c15db80d"
            ]
        ]
    },
    {
        "id": "a965955e91494a5a",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "\"deleted\": true",
        "func": "msg.collection = \"admin_modules\"\nmsg.query = { \"_id\": objectid(msg.payload._id)}\nmsg.payload = {\n    $set: { \"deleted\": true }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 2180,
        "wires": [
            [
                "54a07e73b611ae1d",
                "561b0c80941b7471",
                "bef24defcbfb6c70"
            ]
        ]
    },
    {
        "id": "909d701e2ff20db5",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "delete using pull",
        "func": "msg.collection = \"admin_roles\"\n\nmsg.query = {\n    \"permissions.moduleId\": objectid(msg.payload._id)\n}\n\nmsg.payload =\n    { $pull: { \"permissions\": { \"moduleId\": objectid(msg.payload._id) } } }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 2220,
        "wires": [
            [
                "236c0834e8fd9c13",
                "9deb5f22258b38de",
                "bbbccfc4f6a91996"
            ]
        ]
    },
    {
        "id": "3620d3c1707e795a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/deleteModule",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2220,
        "wires": [
            [
                "909d701e2ff20db5"
            ]
        ]
    },
    {
        "id": "561b0c80941b7471",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 2140,
        "wires": []
    },
    {
        "id": "bef24defcbfb6c70",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2180,
        "wires": [
            [
                "54a07e73b611ae1d"
            ]
        ]
    },
    {
        "id": "bbbccfc4f6a91996",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "506b702386f33bd1"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2220,
        "wires": [
            [
                "236c0834e8fd9c13"
            ]
        ]
    },
    {
        "id": "9deb5f22258b38de",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 2260,
        "wires": []
    },
    {
        "id": "54a07e73b611ae1d",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "debug 258",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2180,
        "wires": []
    },
    {
        "id": "236c0834e8fd9c13",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "debug 261",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 2220,
        "wires": []
    },
    {
        "id": "f58fbe0b47fe3119",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/changeModule",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 2380,
        "wires": [
            [
                "67a3b3c3c74375ac"
            ]
        ]
    },
    {
        "id": "b698014f154d2261",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "function 251",
        "func": "msg.collection = \"admin_roles\"\n// msg.payload = {\n//     \"permissions.moduleId\": objectid(msg.payload._id)\n// }\nmsg.query = {\n    \"permissions.moduleId\": objectid(msg.payload._id)\n    }\n\nmsg.payload = {\n    $set: {\n        \"permissions.$.module\": msg.payload.name\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 2340,
        "wires": [
            [
                "4ed4df62196d54ca",
                "1d438df15537b644",
                "01ef271a90094545"
            ]
        ]
    },
    {
        "id": "e467c152c15db80d",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "debug 260",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 2420,
        "wires": []
    },
    {
        "id": "4ed4df62196d54ca",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "debug 259",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 2300,
        "wires": []
    },
    {
        "id": "b28fcbe36785a21e",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 2380,
        "wires": []
    },
    {
        "id": "5ad538f143332e49",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 520,
        "y": 2380,
        "wires": [
            [
                "e467c152c15db80d"
            ]
        ]
    },
    {
        "id": "01ef271a90094545",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 2340,
        "wires": []
    },
    {
        "id": "0ca74531634bcb42",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/changeModule2",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2340,
        "wires": [
            [
                "b698014f154d2261"
            ]
        ]
    },
    {
        "id": "8a5d1b032e27404a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "e943b30943f1b03a",
        "name": "",
        "url": "/deleteModule2",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2180,
        "wires": [
            [
                "a965955e91494a5a"
            ]
        ]
    },
    {
        "id": "2b761d4cda82bce2",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/getLogs",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3800,
        "wires": [
            [
                "69ce44f6afc97ddc"
            ]
        ]
    },
    {
        "id": "69ce44f6afc97ddc",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "get logs",
        "func": "msg.collection = \"admin_action_logs\"\nmsg.payload = [\n    {\n        $lookup: {\n            from: 'admins',\n            as: 'admin',\n            let: { admin: '$admin' },\n            pipeline: [\n                {\n                    $match: {\n                        deleted: false,\n                        $expr: {\n                            $and: [\n                                { $eq: ['$_id', '$$admin'] }\n                            ]\n                        }\n                    }\n                },\n                {\n                    $project: {\n                        \"_id\": 1,\n                        \"username\": 1,\n                        \"avatarColor\": 1\n                    }\n                }\n            ]\n        }\n    },\n    { $unwind: \"$admin\" }\n];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 3800,
        "wires": [
            [
                "c7c0b22d693bde94"
            ]
        ]
    },
    {
        "id": "03104a93fe9972c7",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 3800,
        "wires": []
    },
    {
        "id": "e33ffd2b28474940",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/getAdmins",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2700,
        "wires": [
            [
                "6dcde0508a25445e",
                "e6660e53f03e6934"
            ]
        ]
    },
    {
        "id": "6dcde0508a25445e",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "get Admins",
        "func": "let payload = {}\nfor (const key in msg.payload) {\n    if (msg.payload[key] && msg.payload[key].length > 0 && msg.payload[key] != \"null\")\n        payload[key] = msg.payload[key]\n}\n\nmsg.payload = payload;\n\nlet match = {}\n\nfor (const key in msg.payload) {\n    if (msg.payload[key] != \",\" && msg.payload[key])\n        match[key] = { $regex: msg.payload[key], $options: \"i\" }\n}\n\nmsg.collection = \"admins\"\n\nmsg.payload = {\n    deleted: false,\n    ...match\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2700,
        "wires": [
            [
                "896bbb4449a7aead"
            ]
        ]
    },
    {
        "id": "3cbe9b885cd9fb0b",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 2700,
        "wires": []
    },
    {
        "id": "80c792926a940ad6",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/getAdmin",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 2820,
        "wires": [
            [
                "d533301c3465a5b9"
            ]
        ]
    },
    {
        "id": "d533301c3465a5b9",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "get admin by id",
        "func": "msg.collection = \"admins\"\n\nmsg.payload = [\n    {\n        $match: {\n            deleted: false,\n            \"_id\": objectid(msg.payload._id)\n        }\n    },\n    {\n        $lookup:\n        {\n            from: \"admin_roles\",\n            localField: \"roles\",\n            foreignField: \"_id\",\n            as: \"roles\"\n        }\n    }\n]\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 2820,
        "wires": [
            [
                "b014a0fe6fdc966d",
                "8afc0843d80b0b3a"
            ]
        ]
    },
    {
        "id": "86f8c6e5f08271e3",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 2820,
        "wires": []
    },
    {
        "id": "5503039a66ee9a9b",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "return first obj",
        "func": "msg.payload = msg.payload[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 2820,
        "wires": [
            [
                "86f8c6e5f08271e3",
                "cffeca83afaf886f"
            ]
        ]
    },
    {
        "id": "42cde0e857c2158e",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/updateAdmin",
        "method": "put",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 2920,
        "wires": [
            [
                "891c03feb5be8968"
            ]
        ]
    },
    {
        "id": "891c03feb5be8968",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "update admin",
        "func": "msg.collection = \"admins\"\nmsg.target = msg.payload._id\n\nmsg.query = {\n    \"_id\": msg.payload._id\n}\ndelete msg.payload._id\n\nmsg.payload = {\n    $set: { ...msg.payload }\n}\n\nmsg.action = \"admins_u\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 2920,
        "wires": [
            [
                "6857847cef200e0f",
                "4f8ddec7275061b3",
                "2d970610487f342d"
            ]
        ]
    },
    {
        "id": "6857847cef200e0f",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 2960,
        "wires": []
    },
    {
        "id": "0bf6f2e4d5479451",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/updatePassword",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 3320,
        "wires": [
            [
                "87cdb1a5dc7d9680"
            ]
        ]
    },
    {
        "id": "87cdb1a5dc7d9680",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "find admin by id",
        "func": "msg.collection = \"admins\"\nmsg.oldpayload = msg.payload;\n\nmsg.payload = {\n   \"_id\": objectid(msg.payload._id)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            },
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 3320,
        "wires": [
            [
                "4ec401a0549074e5"
            ]
        ]
    },
    {
        "id": "0b32d65b041f30cf",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 870,
        "y": 3340,
        "wires": []
    },
    {
        "id": "34a0cf4f007e1ede",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "update password",
        "func": "let encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\n\nmsg.collection = \"admins\"\nmsg.payload = {\n    \"_id\": msg.oldpayload._id,\n    \"password\": encryptedPassword\n}\n\nmsg.action = \"admins_u\";\nmsg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 910,
        "y": 3300,
        "wires": [
            [
                "c559247ecb1c25e6",
                "edacad6d9d0d3741"
            ]
        ]
    },
    {
        "id": "86fe02c26a7a566e",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/createAdmin",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 3160,
        "wires": [
            [
                "9f62c66a082cd180",
                "c1f63db9a62c8ece"
            ]
        ]
    },
    {
        "id": "a7a917be9f324bf1",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "create admin",
        "func": "let randomColor = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\nlet encryptedPassword = await bcrypt.hash(msg.oldpayload.password, 10);\n\nmsg.payload ={\n    \"_id\": objectid(),\n    \"deleted\": false,\n    \"avatarColor\": randomColor,\n    \"createdAt\": new Date(),\n    \"roles\": [objectid(\"63691dd3ecf8b000118482f6\")],\n    \"active\": true,\n    \"login\": msg.oldpayload.login,\n    \"email\": msg.oldpayload.email,\n    \"username\": msg.oldpayload.username,\n    \"password\": encryptedPassword\n}\n\nmsg.action = \"admins_c\";\nmsg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            },
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 910,
        "y": 3160,
        "wires": [
            [
                "9ab77d448ac64263",
                "8c345b1fba62f9ad",
                "ba606f795586b668"
            ]
        ]
    },
    {
        "id": "9ab77d448ac64263",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 3160,
        "wires": []
    },
    {
        "id": "9f62c66a082cd180",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "check ",
        "func": "msg.collection = \"admins\"\nmsg.oldpayload = msg.payload;\nmsg.payload = {\n    login: msg.payload.login\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3160,
        "wires": [
            [
                "5dac5ff5d5cbf8f9"
            ]
        ]
    },
    {
        "id": "641a55eab5e267d3",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "func": "if (msg.payload.length > 0) {\n    msg.error = {\n        data: \"This login is already in use\",\n        code: 400,\n    }\n    return [null, msg]\n}\nelse{\n    return [msg, null]\n}\n\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 3160,
        "wires": [
            [
                "a7a917be9f324bf1",
                "a7ed5b78c8f1573c"
            ],
            [
                "2be1f687f03183dc"
            ]
        ]
    },
    {
        "id": "ffc64ad6b52688be",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "check",
        "func": "if (msg.payload.length == 0) {\n    msg.payload = {\n        data: \"Password isn`t correct\",\n        code: 400\n    }\n    return [node.error(\"my error message\", msg), msg]\n}\nelse{\n    let check = await bcrypt.compare(msg.oldpayload.oldPassword, msg.payload[0].password)\n    node.warn(check)\n    return [msg, node.error(\"my error message\", msg)]\n}\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "bcrypt",
                "module": "bcrypt"
            }
        ],
        "x": 730,
        "y": 3320,
        "wires": [
            [
                "34a0cf4f007e1ede"
            ],
            [
                "0b32d65b041f30cf"
            ]
        ]
    },
    {
        "id": "c559247ecb1c25e6",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1130,
        "y": 3340,
        "wires": []
    },
    {
        "id": "0e392d11e7195050",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/deleteAdmin",
        "method": "delete",
        "upload": true,
        "swaggerDoc": "",
        "x": 160,
        "y": 3060,
        "wires": [
            [
                "ea43fc49c06c69f4",
                "80fd02b46f9bfaa5"
            ]
        ]
    },
    {
        "id": "ea43fc49c06c69f4",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "delete admin",
        "func": "msg.collection = \"admins\"\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $set: { \"deleted\": true }\n}\n\n// msg.action = \"admins_d\";\n// msg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 350,
        "y": 3060,
        "wires": [
            [
                "26caf235c87c974a",
                "451cfeb39cec4864",
                "80fd02b46f9bfaa5"
            ]
        ]
    },
    {
        "id": "26caf235c87c974a",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 3100,
        "wires": []
    },
    {
        "id": "29ac45d1d556a008",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/addRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 3480,
        "wires": [
            [
                "8bd9c5149de03287"
            ]
        ]
    },
    {
        "id": "8bd9c5149de03287",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "func": "msg.collection = \"admins\"\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n}\nmsg.target = msg.payload._id\nmsg.payload = {\n    $push: {\n        \"roles\": objectid(msg.payload.role)\n    }\n}\nmsg.action = \"admins_u\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 3480,
        "wires": [
            [
                "e5b16cb71b692b66",
                "6390855bb4067bf5"
            ]
        ]
    },
    {
        "id": "e5b16cb71b692b66",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 3520,
        "wires": []
    },
    {
        "id": "93a3ec0e582f4f5c",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/getAllRoles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 3640,
        "wires": [
            [
                "405fdb5319c967c6"
            ]
        ]
    },
    {
        "id": "405fdb5319c967c6",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "get roles",
        "func": "msg.collection = \"admin_roles\"\nlet match = {};\nif (msg.payload.name != \",\" && msg.payload.name) {\n    match = {\n        name: { $regex: msg.payload.name, $options: \"i\" }\n    }\n}\n\nmsg.payload = {\n    deleted: false, \n    ...match\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 3640,
        "wires": [
            [
                "3dc4c8b7947bf50f"
            ]
        ]
    },
    {
        "id": "c6fc847deed90830",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 3640,
        "wires": []
    },
    {
        "id": "ff26e8f6d3d6c9ba",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/getLogsAdmin",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 3720,
        "wires": [
            [
                "d2c211b834120ee3"
            ]
        ]
    },
    {
        "id": "d2c211b834120ee3",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "get logs by id",
        "func": "msg.collection = \"admin_action_logs\"\nmsg.payload ={\n    \"admin\": objectid(msg.payload._id)\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 330,
        "y": 3720,
        "wires": [
            [
                "0dec82b8ee2368ab"
            ]
        ]
    },
    {
        "id": "84ed39a07b136660",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 3720,
        "wires": []
    },
    {
        "id": "0b370c06eae18a69",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/deleteRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 3560,
        "wires": [
            [
                "a7acaa010321b1a7"
            ]
        ]
    },
    {
        "id": "a7acaa010321b1a7",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "func": "msg.collection = \"admins\"\nmsg.query = {\n    \"_id\": objectid(msg.req.query._id)\n}\n\nmsg.payload = {\n    $pull: {\n        \"roles\": objectid(msg.payload.role)\n    }\n}\nmsg.action = \"admins_u\";\nmsg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 340,
        "y": 3560,
        "wires": [
            [
                "0e6c2c59a16d1834",
                "320078212ad892ba"
            ]
        ]
    },
    {
        "id": "0e6c2c59a16d1834",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 3600,
        "wires": []
    },
    {
        "id": "a7ed5b78c8f1573c",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 3100,
        "wires": []
    },
    {
        "id": "896bbb4449a7aead",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 2700,
        "wires": [
            [
                "3cbe9b885cd9fb0b",
                "fef6a5357f084eda"
            ]
        ]
    },
    {
        "id": "b014a0fe6fdc966d",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 2820,
        "wires": [
            [
                "5503039a66ee9a9b"
            ]
        ]
    },
    {
        "id": "4f8ddec7275061b3",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 2920,
        "wires": [
            []
        ]
    },
    {
        "id": "5dac5ff5d5cbf8f9",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 3160,
        "wires": [
            [
                "641a55eab5e267d3",
                "71d2a03814a9dfee"
            ]
        ]
    },
    {
        "id": "8c345b1fba62f9ad",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1160,
        "y": 3120,
        "wires": [
            []
        ]
    },
    {
        "id": "edacad6d9d0d3741",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 1160,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "4ec401a0549074e5",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 560,
        "y": 3320,
        "wires": [
            [
                "ffc64ad6b52688be"
            ]
        ]
    },
    {
        "id": "6390855bb4067bf5",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 3480,
        "wires": [
            []
        ]
    },
    {
        "id": "320078212ad892ba",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 580,
        "y": 3560,
        "wires": [
            []
        ]
    },
    {
        "id": "c1f63db9a62c8ece",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 3220,
        "wires": []
    },
    {
        "id": "71d2a03814a9dfee",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 3200,
        "wires": []
    },
    {
        "id": "2be1f687f03183dc",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 920,
        "y": 3220,
        "wires": []
    },
    {
        "id": "ba606f795586b668",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 3200,
        "wires": []
    },
    {
        "id": "2d970610487f342d",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2960,
        "wires": []
    },
    {
        "id": "d021b73557844c5a",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 3420,
        "wires": []
    },
    {
        "id": "8afc0843d80b0b3a",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2760,
        "wires": []
    },
    {
        "id": "cffeca83afaf886f",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 2780,
        "wires": []
    },
    {
        "id": "3dc4c8b7947bf50f",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 3640,
        "wires": [
            [
                "c6fc847deed90830"
            ]
        ]
    },
    {
        "id": "0dec82b8ee2368ab",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 530,
        "y": 3720,
        "wires": [
            [
                "84ed39a07b136660"
            ]
        ]
    },
    {
        "id": "c7c0b22d693bde94",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "8fc1ff99ab8dc60c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 550,
        "y": 3800,
        "wires": [
            [
                "03104a93fe9972c7"
            ]
        ]
    },
    {
        "id": "ce27ac35d95f93b2",
        "type": "inject",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 2740,
        "wires": [
            [
                "6dcde0508a25445e"
            ]
        ]
    },
    {
        "id": "fef6a5357f084eda",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 2740,
        "wires": []
    },
    {
        "id": "e6660e53f03e6934",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 2740,
        "wires": []
    },
    {
        "id": "451cfeb39cec4864",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 3040,
        "wires": [
            []
        ]
    },
    {
        "id": "80fd02b46f9bfaa5",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "debug 184",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 3100,
        "wires": []
    },
    {
        "id": "8bf0d9866e1fb202",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "",
        "url": "/updateRoleUser",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 3400,
        "wires": [
            [
                "a684341558bd0590",
                "36fb081cfe2276b7"
            ]
        ]
    },
    {
        "id": "a684341558bd0590",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "function 252",
        "func": "msg.collection = \"admins\";\nnode.warn(msg.payload);\n\nmsg.query = {\n    \"_id\": objectid(msg.payload._id)\n}\n\nmsg.payload = {\n    $set: {\n        \"roles\": [objectid(msg.payload.roles)]\n    }\n}\nnode.warn(msg.payload);\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 370,
        "y": 3400,
        "wires": [
            [
                "65d55f372441c4af",
                "a07384419598e9c7",
                "fe24c5934eabbc00"
            ]
        ]
    },
    {
        "id": "fe24c5934eabbc00",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 3440,
        "wires": []
    },
    {
        "id": "36fb081cfe2276b7",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "a704f946e42595e0",
        "name": "db",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 270,
        "y": 3440,
        "wires": []
    },
    {
        "id": "98abc1a2817ec506",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload={\n    name:msg.payload.name,\n    deleted:false,\n    permissions:[],\n    createdAt: new Date((new Date().toISOString())),\n    __v:0\n}\n\nmsg.action = msg.collection + \"_с\"\nmsg.target = msg.payload._id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 860,
        "wires": [
            [
                "d400e54e78691b09",
                "5948e3b76171e9d8"
            ]
        ]
    },
    {
        "id": "0a2bbd05c8f56f64",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/createRoles",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 860,
        "wires": [
            [
                "98abc1a2817ec506"
            ]
        ]
    },
    {
        "id": "d400e54e78691b09",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 820,
        "wires": []
    },
    {
        "id": "b96a7e3142d5e0b8",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/getRoles",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "4dd4e65e03666b78",
                "74a5f0064f496862"
            ]
        ]
    },
    {
        "id": "6efd03b5c14e1a0a",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 650,
        "y": 900,
        "wires": []
    },
    {
        "id": "5948e3b76171e9d8",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "ed5caba1b7b9f862"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 540,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "4dd4e65e03666b78",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload = {\n    deleted: false\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 900,
        "wires": [
            [
                "a3a1fe41c52e793d",
                "74a5f0064f496862"
            ]
        ]
    },
    {
        "id": "a3a1fe41c52e793d",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 490,
        "y": 900,
        "wires": [
            [
                "6efd03b5c14e1a0a",
                "74a5f0064f496862"
            ]
        ]
    },
    {
        "id": "84a635c5a4940186",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection =\"admin_roles\"\nmsg.target = msg.payload._id\nmsg.action = msg.collection + \"_u\"\nmsg.query={\n    _id: objectid(msg.payload._id)\n}\nmsg.payload={\n    $set:{\n        name: msg.payload.name\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 300,
        "y": 1180,
        "wires": [
            [
                "b217419fbab3ef52",
                "8444458ae75aadd0"
            ]
        ]
    },
    {
        "id": "a2a65602eb7e991e",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/updateRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1180,
        "wires": [
            [
                "84a635c5a4940186"
            ]
        ]
    },
    {
        "id": "b217419fbab3ef52",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 500,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "8444458ae75aadd0",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1180,
        "wires": []
    },
    {
        "id": "cf959feab34c6243",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/deleteModuleFromRole",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1440,
        "wires": [
            [
                "51aa516723d2730d",
                "9f748da111a88366"
            ]
        ]
    },
    {
        "id": "51aa516723d2730d",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\nmsg.query = {\n   \"_id\": objectid(msg.payload._id)\n};\n\nmsg.payload = {\n    $pull: {\n        \"permissions\": {\n            \"moduleId\": objectid(msg.payload.moduleId)\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 420,
        "y": 1440,
        "wires": [
            [
                "0dc46349ee8a11eb",
                "ed0b45a9c3b3b3f2",
                "9f748da111a88366"
            ]
        ]
    },
    {
        "id": "0dc46349ee8a11eb",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 640,
        "y": 1440,
        "wires": [
            [
                "9f748da111a88366"
            ]
        ]
    },
    {
        "id": "8d15837898b2a23a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/deleteRole",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1260,
        "wires": [
            [
                "9d5b70569d05cb68"
            ]
        ]
    },
    {
        "id": "9d5b70569d05cb68",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection =\"admin_roles\"\nmsg.target = msg.payload._id\nmsg.action = msg.collection + \"_d\"\nmsg.query={\n    _id: objectid(msg.payload._id)\n}\nmsg.payload={\n    $set:{\n        deleted: true\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 320,
        "y": 1260,
        "wires": [
            [
                "cef79f955eca20c3",
                "4dfd050edab2c52e"
            ]
        ]
    },
    {
        "id": "4dfd050edab2c52e",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 470,
        "y": 1260,
        "wires": []
    },
    {
        "id": "cef79f955eca20c3",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 500,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "ed0b45a9c3b3b3f2",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 1400,
        "wires": []
    },
    {
        "id": "9f748da111a88366",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1400,
        "wires": []
    },
    {
        "id": "74a5f0064f496862",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 940,
        "wires": []
    },
    {
        "id": "5def8644213ddab4",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/getPremissionbyRoleId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 1320,
        "wires": [
            [
                "88bf3ec899eae994",
                "607ead0882586594"
            ]
        ]
    },
    {
        "id": "29b939a2b731ac5b",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 890,
        "y": 1320,
        "wires": []
    },
    {
        "id": "88bf3ec899eae994",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "find by id",
        "func": "msg.collection = \"admin_roles\"\nmsg.payload = {\n    \"_id\": objectid(msg.payload._id)\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "ad6d4c82c65d1795",
                "607ead0882586594"
            ]
        ]
    },
    {
        "id": "607ead0882586594",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "debug 182",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1360,
        "wires": []
    },
    {
        "id": "ad6d4c82c65d1795",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "f0c5dc654e8e142e"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 510,
        "y": 1320,
        "wires": [
            [
                "607ead0882586594",
                "ad4a52f76d4198c5"
            ]
        ]
    },
    {
        "id": "ad4a52f76d4198c5",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "return permissions",
        "func": "msg.payload = msg.payload.flatMap((elem) => {\n return elem.permissions\n})\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1320,
        "wires": [
            [
                "29b939a2b731ac5b",
                "607ead0882586594"
            ]
        ]
    },
    {
        "id": "c50f1276d2d88c9e",
        "type": "inject",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "4dd4e65e03666b78"
            ]
        ]
    },
    {
        "id": "5a459724ad591bc6",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/addModuleToRole",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1020,
        "wires": [
            [
                "e8126ce507b79580",
                "9fd30dbac3f51e1a"
            ]
        ]
    },
    {
        "id": "483cd4354a884e7a",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 530,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e8126ce507b79580",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 980,
        "wires": []
    },
    {
        "id": "9fd30dbac3f51e1a",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\n\nmsg.query = {\n     \"_id\": objectid(msg.payload._id)\n     }\n\nmsg.payload = {\n     $addToSet: {\n          permissions: {\n          \"moduleId\": objectid(msg.payload.moduleId),\n          \"module\": msg.payload.moduleName,\n          \"canCreate\": msg.payload.canCreate,\n          \"canRead\": msg.payload.canRead,\n          \"canEdit\": msg.payload.canEdit,\n          \"canRemove\": msg.payload.canRemove        \n            }\n}\n}\n     \n// msg.payload = {\n//      $set: {\n//           \"permissions.$.moduleId\": objectid(msg.payload.moduleId),\n//           \"permissions.$.module\": msg.payload.moduleName,\n//           \"permissions.$.canCreate\": msg.payload.canCreate,\n//           \"permissions.$.canRead\": msg.payload.canRead,\n//           \"permissions.$.canEdit\": msg.payload.canEdit,\n//           \"permissions.$.canRemove\": msg.payload.canRemove\n//      }\n// }\n\nmsg.action = msg.collection + \"_с\"\nmsg.target = msg.payload._id\nreturn msg;\n\n// let crud = {\n//     \"canCreate\": false,\n//     \"canRead\": false,\n//     \"canEdit\": false,\n//     \"canRemove\": false\n// }\n\n// msg.payload.options.map(e => {\n//     if (e == \"C\") {\n//         crud.canCreate = true\n//     }\n//     else if (e == \"R\") {\n//         crud.canRead = true\n//     }\n//     else if (e == \"U\") {\n//         crud.canEdit = true\n//     } else if (e == \"D\") {\n//         crud.canRemove = true\n//     }\n// })\n\n// let modules = msg.payload.moduleName.map((name, index) => {\n//     return {\n//         \"name\": name,\n//         \"value\": msg.payload.moduleValue[index]\n//     }\n// })\n\n// let preparedModules\n//     = modules.map(item => {\n//         return {\n//             module: item.name,\n//             moduleId: objectid(item.value),\n//             ...crud\n//         }\n//     })\n\n// msg.query = {\n//     \"_id\": objectid(msg.payload._id)\n// }\n\n// msg.payload = {\n//         $addToSet: {\n//             permissions: {\n//                 $each: [...preparedModules]\n//             }\n//         }\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 1020,
        "wires": [
            [
                "e8126ce507b79580",
                "268428d7f2b5a16f",
                "483cd4354a884e7a"
            ]
        ]
    },
    {
        "id": "268428d7f2b5a16f",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 540,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "2fa600850fa71aa1",
        "type": "http response",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 1100,
        "wires": []
    },
    {
        "id": "154195fad4d7e70d",
        "type": "function",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "func": "msg.collection = \"admin_roles\"\n\nmsg.query = {\n     \"_id\": objectid(msg.payload._id),\n     \"permissions.moduleId\": objectid(msg.payload.moduleId),\n\n     }\n\nmsg.payload = {\n     $set: {\n          \"permissions.$.module\": msg.payload.moduleName,\n          \"permissions.$.canCreate\": msg.payload.canCreate,\n          \"permissions.$.canRead\": msg.payload.canRead,\n          \"permissions.$.canEdit\": msg.payload.canEdit,\n          \"permissions.$.canRemove\": msg.payload.canRemove        \n     }\n}\n     \n// msg.payload = {\n//      $set: {\n//           \"permissions.$.moduleId\": objectid(msg.payload.moduleId),\n//           \"permissions.$.module\": msg.payload.moduleName,\n//           \"permissions.$.canCreate\": msg.payload.canCreate,\n//           \"permissions.$.canRead\": msg.payload.canRead,\n//           \"permissions.$.canEdit\": msg.payload.canEdit,\n//           \"permissions.$.canRemove\": msg.payload.canRemove\n//      }\n// }\n\nmsg.action = msg.collection + \"_с\"\nmsg.target = msg.payload._id\nreturn msg;\n\n// let crud = {\n//     \"canCreate\": false,\n//     \"canRead\": false,\n//     \"canEdit\": false,\n//     \"canRemove\": false\n// }\n\n// msg.payload.options.map(e => {\n//     if (e == \"C\") {\n//         crud.canCreate = true\n//     }\n//     else if (e == \"R\") {\n//         crud.canRead = true\n//     }\n//     else if (e == \"U\") {\n//         crud.canEdit = true\n//     } else if (e == \"D\") {\n//         crud.canRemove = true\n//     }\n// })\n\n// let modules = msg.payload.moduleName.map((name, index) => {\n//     return {\n//         \"name\": name,\n//         \"value\": msg.payload.moduleValue[index]\n//     }\n// })\n\n// let preparedModules\n//     = modules.map(item => {\n//         return {\n//             module: item.name,\n//             moduleId: objectid(item.value),\n//             ...crud\n//         }\n//     })\n\n// msg.query = {\n//     \"_id\": objectid(msg.payload._id)\n// }\n\n// msg.payload = {\n//         $addToSet: {\n//             permissions: {\n//                 $each: [...preparedModules]\n//             }\n//         }\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 360,
        "y": 1100,
        "wires": [
            [
                "e7e9faa3517838c9",
                "65aa69e53f380ccd",
                "2fa600850fa71aa1"
            ]
        ]
    },
    {
        "id": "249d038ac29bd16a",
        "type": "http in",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "url": "/editModuleInRole",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1100,
        "wires": [
            [
                "e7e9faa3517838c9",
                "154195fad4d7e70d"
            ]
        ]
    },
    {
        "id": "e7e9faa3517838c9",
        "type": "debug",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1060,
        "wires": []
    },
    {
        "id": "65aa69e53f380ccd",
        "type": "link call",
        "z": "98bdf776d7929776",
        "g": "c93da496677870ef",
        "name": "",
        "links": [
            "fa4c26274360af74"
        ],
        "linkType": "static",
        "timeout": "10",
        "x": 540,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "bc714c168d1a5ba1",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "campaign",
        "func": "msg.payload = `CREATE TABLE campaign(\ncampain_id text,\ncampain_name text,\nbudget integer   \n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 60,
        "wires": [
            [
                "3eaf390928cd0414",
                "00a854798db89551"
            ]
        ]
    },
    {
        "id": "b20277a765a4203d",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "bc714c168d1a5ba1"
            ]
        ]
    },
    {
        "id": "3eaf390928cd0414",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3973",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 60,
        "wires": []
    },
    {
        "id": "00a854798db89551",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 60,
        "wires": [
            [
                "3eaf390928cd0414"
            ]
        ]
    },
    {
        "id": "81487edbaf3f541c",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "campaign_users",
        "func": "msg.payload = `CREATE TABLE campaign_users(\nuser_id text,\ncampain_id text,\npermission text,\nbudget text   \n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 140,
        "wires": [
            [
                "112e59bb34eec6dd",
                "50cf251457e39239"
            ]
        ]
    },
    {
        "id": "5a7d7ca0dc557f6d",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "81487edbaf3f541c"
            ]
        ]
    },
    {
        "id": "112e59bb34eec6dd",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3974",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 140,
        "wires": []
    },
    {
        "id": "50cf251457e39239",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 140,
        "wires": [
            [
                "112e59bb34eec6dd"
            ]
        ]
    },
    {
        "id": "9eea1b2914ab3781",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "campaign_users",
        "func": "msg.payload = `select * from campaign_users`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            [
                "f81eeabb82eed177",
                "37db08634b1f5428"
            ]
        ]
    },
    {
        "id": "616eb40aba7046c0",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 520,
        "wires": [
            [
                "9eea1b2914ab3781"
            ]
        ]
    },
    {
        "id": "f81eeabb82eed177",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3975",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 480,
        "wires": []
    },
    {
        "id": "37db08634b1f5428",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 520,
        "wires": [
            [
                "f81eeabb82eed177"
            ]
        ]
    },
    {
        "id": "93007b1705f257a0",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "publishing",
        "func": "msg.payload = `CREATE TABLE publishing(\nname text,\npublish_id text\n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "b609c8fca3e06412",
                "67df230fee76042d"
            ]
        ]
    },
    {
        "id": "4d209cb14a92dc01",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "93007b1705f257a0"
            ]
        ]
    },
    {
        "id": "b609c8fca3e06412",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3986",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 200,
        "wires": []
    },
    {
        "id": "67df230fee76042d",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 240,
        "wires": [
            [
                "b609c8fca3e06412"
            ]
        ]
    },
    {
        "id": "23e3ce56362117b6",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "publishing_users",
        "func": "msg.payload = `CREATE TABLE publishing_users(\npublish_id text,\nuser_id text\n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 340,
        "wires": [
            [
                "ef200585e747351b",
                "29d12daf794a44a5"
            ]
        ]
    },
    {
        "id": "3d71d7470e5e2981",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 340,
        "wires": [
            [
                "23e3ce56362117b6"
            ]
        ]
    },
    {
        "id": "ef200585e747351b",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3987",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 300,
        "wires": []
    },
    {
        "id": "29d12daf794a44a5",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 340,
        "wires": [
            [
                "ef200585e747351b"
            ]
        ]
    },
    {
        "id": "524b7d8cdd368757",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "sites",
        "func": "msg.payload = `CREATE TABLE sites(\nname text,\ndescription text,\nlat float,\nlon float,\nsite_id text,\npublish_id text\n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 440,
        "wires": [
            [
                "c760c402125297ab",
                "680e52c00f2b1573"
            ]
        ]
    },
    {
        "id": "b4ae79360b0b8469",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 440,
        "wires": [
            [
                "524b7d8cdd368757"
            ]
        ]
    },
    {
        "id": "c760c402125297ab",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3988",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 400,
        "wires": []
    },
    {
        "id": "680e52c00f2b1573",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 500,
        "y": 440,
        "wires": [
            [
                "c760c402125297ab"
            ]
        ]
    },
    {
        "id": "b1ef7a68d56f287d",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 600,
        "wires": [
            [
                "3d566674b1672998"
            ]
        ]
    },
    {
        "id": "3d566674b1672998",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "ads",
        "func": "msg.payload = `CREATE TABLE ads(\ncustomer_id text,\ncampaign_id text,\nad_id text,\nad_creative_url text,\nplay_time text,\ncreatedAt timestamp,\nstatus text,\ntitle text,\ncpm integer,\nad_type text,\nreal_cpm integer,\napproved boolean\n);\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 600,
        "wires": [
            [
                "6a73b688009f9ea4",
                "0452fd71b0802be6"
            ]
        ]
    },
    {
        "id": "6a73b688009f9ea4",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3969",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 600,
        "wires": []
    },
    {
        "id": "0452fd71b0802be6",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 480,
        "y": 600,
        "wires": [
            [
                "6a73b688009f9ea4"
            ]
        ]
    },
    {
        "id": "c68368cc230f35f5",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 840,
        "y": 440,
        "wires": [
            [
                "08d2bba8d33b0c34"
            ]
        ]
    },
    {
        "id": "08d2bba8d33b0c34",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "ads",
        "func": "msg.payload = `SELECT * FROM campaign `\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 440,
        "wires": [
            [
                "c19fe4a7f4c67875",
                "d948c37e87139354"
            ]
        ]
    },
    {
        "id": "c19fe4a7f4c67875",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3999",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 440,
        "wires": []
    },
    {
        "id": "d948c37e87139354",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1200,
        "y": 440,
        "wires": [
            [
                "c19fe4a7f4c67875"
            ]
        ]
    },
    {
        "id": "ca8b246277ddf1c5",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "publishing_users",
        "func": "msg.payload = `select * from publishing\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            [
                "e9cd0c8682abfbaa",
                "d63635ee9244f088"
            ]
        ]
    },
    {
        "id": "9695aae608c87988",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 280,
        "wires": [
            [
                "ca8b246277ddf1c5"
            ]
        ]
    },
    {
        "id": "e9cd0c8682abfbaa",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 4010",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 240,
        "wires": []
    },
    {
        "id": "d63635ee9244f088",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "e9cd0c8682abfbaa"
            ]
        ]
    },
    {
        "id": "780783e41a7fecd0",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "campaign_users",
        "func": "msg.payload = `select * from sites\n`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 380,
        "wires": [
            [
                "83fd47504039a813",
                "842dd9e78e79d7fd"
            ]
        ]
    },
    {
        "id": "76d2ab33be589860",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 380,
        "wires": [
            [
                "780783e41a7fecd0"
            ]
        ]
    },
    {
        "id": "83fd47504039a813",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 4011",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 380,
        "wires": []
    },
    {
        "id": "842dd9e78e79d7fd",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "83fd47504039a813"
            ]
        ]
    },
    {
        "id": "0855ba76c7e619ce",
        "type": "postgres",
        "z": "1a3f32f08a9b2467",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 1380,
        "y": 60,
        "wires": [
            [
                "e11b81e487141d6b"
            ]
        ]
    },
    {
        "id": "be66bf70e580a1bd",
        "type": "inject",
        "z": "1a3f32f08a9b2467",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "6e5e35342faa3f2b"
            ]
        ]
    },
    {
        "id": "6e5e35342faa3f2b",
        "type": "function",
        "z": "1a3f32f08a9b2467",
        "name": "function 609",
        "func": "msg.payload = `ALTER TABLE ads ADD COLUMN publisher text`\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "0855ba76c7e619ce"
            ]
        ]
    },
    {
        "id": "e11b81e487141d6b",
        "type": "debug",
        "z": "1a3f32f08a9b2467",
        "name": "debug 3997",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 60,
        "wires": []
    },
    {
        "id": "d53af55e3f50032d",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "create publish",
        "func": "function uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\n\nvar id = uuid();\n\n\nmsg.payload = `INSERT INTO publishing (name, publish_id)\nVALUES ('${msg.payload.name}', '${id}')`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 80,
        "wires": [
            [
                "29ae916d78fe4550"
            ]
        ]
    },
    {
        "id": "fdcfba21a9dc3722",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/createPublish",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "d53af55e3f50032d"
            ]
        ]
    },
    {
        "id": "34fd9663b476865e",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 720,
        "y": 80,
        "wires": []
    },
    {
        "id": "58e3d2ec2a29e867",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "get all data",
        "func": "msg.payload = `select * FROM publishing`\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 140,
        "wires": [
            [
                "574222580d9f0966"
            ]
        ]
    },
    {
        "id": "f65f5be451f5d386",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "delete publish by id",
        "func": "msg.payload = `DELETE from publishing \nwhere publish_id='${msg.payload._id}'`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 460,
        "wires": [
            [
                "afa15ee3f8bf0732"
            ]
        ]
    },
    {
        "id": "4683c20a930395f5",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "update publish by id",
        "func": "msg.payload = `UPDATE publishing\nSET name='${msg.payload.name}'\nwhere publish_id='${msg.payload._id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "24ea11bd632db3b9"
            ]
        ]
    },
    {
        "id": "76b087898a3680fa",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/getPublish",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "58e3d2ec2a29e867"
            ]
        ]
    },
    {
        "id": "d7cdb8848bce9b0c",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/deletePublish",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 480,
        "wires": [
            [
                "28175a16199fc0b6",
                "f65f5be451f5d386"
            ]
        ]
    },
    {
        "id": "cab9bbfa9b0bd6ea",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/updatePublish",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "4683c20a930395f5"
            ]
        ]
    },
    {
        "id": "93d7370bed319e09",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 200,
        "wires": []
    },
    {
        "id": "922845b8bb7138a4",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 750,
        "y": 460,
        "wires": []
    },
    {
        "id": "eadf5276f7fbfa85",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 140,
        "wires": []
    },
    {
        "id": "04dd154407596075",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "create publish",
        "func": "function uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\n\nvar id = uuid();\n\nmsg.pub_id = id;\nmsg.user_id = msg.payload.user_id\n\nmsg.payload = `INSERT INTO publishing (name, publish_id)\nVALUES ('${msg.payload.name}', '${id}')`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 280,
        "wires": [
            [
                "f80cdd3f3bf1e646",
                "399b077e2be6c800",
                "20d66ece466917e8"
            ]
        ]
    },
    {
        "id": "b9c9eeb7abf050eb",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/createPublisher",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 280,
        "wires": [
            [
                "04dd154407596075"
            ]
        ]
    },
    {
        "id": "1f1b5bfa736c0079",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 760,
        "y": 300,
        "wires": []
    },
    {
        "id": "f80cdd3f3bf1e646",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "function 241",
        "func": "msg.payload = `INSERT INTO publishing_users (publish_id, user_id)\nVALUES ('${msg.pub_id}', '${msg.user_id}')`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 260,
        "wires": [
            [
                "85c7f55f892926aa",
                "3ca6c1a5b651e9f2"
            ]
        ]
    },
    {
        "id": "525ba5ece40327ae",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "get all data",
        "func": "// if (msg.payload.user_id && msg.payload.publish_id ){\n//     msg.payload =  `select * from publishing where publish_id =' ${msg.payload.publish_id}' `\n//     return msg\n// }\n// if (msg.payload.user_id) {\n    msg.payload = `with user_info as \n(select publish_id as pub_id from publishing_users \n where user_id = '${msg.payload.user_id}'),\npublisher_info as (select * from publishing \nright join user_info \non user_info.pub_id = publishing.publish_id)\nselect publish_id, name from publisher_info where publish_id is not null\n \n `\n//     return msg\n// }\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 380,
        "wires": [
            [
                "c957d119700a11a2",
                "98dc64de7fed14e5"
            ]
        ]
    },
    {
        "id": "3b64cec4c4fa5105",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/getPublishById",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "525ba5ece40327ae",
                "9cf13c2891cb78fd"
            ]
        ]
    },
    {
        "id": "f888592bbffaacb0",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 380,
        "wires": []
    },
    {
        "id": "28175a16199fc0b6",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "function 243",
        "func": "msg.payload = `DELETE from publishing_users \nwhere publish_id='${msg.payload._id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "caba5fc989f1973f"
            ]
        ]
    },
    {
        "id": "6686978057bd3c20",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "get all data",
        "func": "msg.payload = `select * FROM publishing_users`\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "ffca066f3af9018f"
            ]
        ]
    },
    {
        "id": "6fa78836219b2118",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/getPublishUser",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 560,
        "wires": [
            [
                "6686978057bd3c20"
            ]
        ]
    },
    {
        "id": "1bed6f37bb96f213",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 560,
        "wires": []
    },
    {
        "id": "29ae916d78fe4550",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 560,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "574222580d9f0966",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 140,
        "wires": [
            [
                "eadf5276f7fbfa85"
            ]
        ]
    },
    {
        "id": "24ea11bd632db3b9",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 560,
        "y": 200,
        "wires": [
            [
                "93d7370bed319e09"
            ]
        ]
    },
    {
        "id": "399b077e2be6c800",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 600,
        "y": 300,
        "wires": [
            [
                "1f1b5bfa736c0079",
                "20d66ece466917e8"
            ]
        ]
    },
    {
        "id": "c957d119700a11a2",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 380,
        "wires": [
            [
                "f888592bbffaacb0",
                "98dc64de7fed14e5"
            ]
        ]
    },
    {
        "id": "afa15ee3f8bf0732",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 600,
        "y": 460,
        "wires": [
            [
                "922845b8bb7138a4"
            ]
        ]
    },
    {
        "id": "ffca066f3af9018f",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 560,
        "wires": [
            [
                "1bed6f37bb96f213"
            ]
        ]
    },
    {
        "id": "85c7f55f892926aa",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 760,
        "y": 260,
        "wires": [
            [
                "3ca6c1a5b651e9f2"
            ]
        ]
    },
    {
        "id": "caba5fc989f1973f",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3ca6c1a5b651e9f2",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 3976",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "20d66ece466917e8",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 3977",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 340,
        "wires": []
    },
    {
        "id": "98dc64de7fed14e5",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 3978",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 420,
        "wires": []
    },
    {
        "id": "9cf13c2891cb78fd",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 3987",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 340,
        "wires": []
    },
    {
        "id": "c47fb8c6425881d1",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "create site",
        "func": "function uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\n\nvar id = uuid();\n\n\nmsg.payload = `INSERT INTO sites (name, site_id, description, lat, lon, publish_id, type, space,cost)\nVALUES ('${msg.payload.name}', '${id}', '${msg.payload.description}', ${msg.payload.lat}, ${msg.payload.lng}, '${msg.payload.publish_id}', '${msg.payload.type}', '${msg.payload.space}', '${msg.payload.cost}')`\n\n\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 720,
        "wires": [
            [
                "2115ec58f2c9be84",
                "5a9ed93a41b99d20"
            ]
        ]
    },
    {
        "id": "3fa88b29ddafd21c",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/createSite",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 720,
        "wires": [
            [
                "c47fb8c6425881d1"
            ]
        ]
    },
    {
        "id": "9b064f9b39109d4f",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 720,
        "wires": []
    },
    {
        "id": "1ee70a933b3f815b",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "delete site by id",
        "func": "msg.payload = `DELETE from  sites \nwhere site_id='${msg.payload.site_id}'`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 880,
        "wires": [
            [
                "5c4f62dcc0efb3ac",
                "8ec86ee5e4fcecad"
            ]
        ]
    },
    {
        "id": "c2fca3db046ea505",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "update site by id",
        "func": "msg.payload = `UPDATE sites\nSET site_name='${msg.payload.name}', description='${msg.payload.description}', space =${msg.payload.space}\nwhere site_id='${msg.payload.site_id}'`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 940,
        "wires": [
            [
                "8cd6c2813a03ab4a"
            ]
        ]
    },
    {
        "id": "24b530a145d51fea",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/getSites",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "26b43d219573f787"
            ]
        ]
    },
    {
        "id": "861ea50c9b804777",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/deleteSite",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "1ee70a933b3f815b"
            ]
        ]
    },
    {
        "id": "8ca125585c66316c",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/updateSites",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 940,
        "wires": [
            [
                "c2fca3db046ea505"
            ]
        ]
    },
    {
        "id": "45edd1dd4ffe5277",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 940,
        "wires": []
    },
    {
        "id": "81121fd3f7261bab",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 880,
        "wires": []
    },
    {
        "id": "fc5b76fbe38cede8",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 800,
        "wires": []
    },
    {
        "id": "6c3212dcb71f2087",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "get all data",
        "func": "// if (msg.payload.user_id && msg.payload.publish_id && msg.payload.publish_id !=='null'){\n//     msg.payload = `with \n// publisher_info \n// as (select publish_id as p_id, name as publish_name from publishing \n// where publish_id = '${msg.payload.publish_id}'),\n//   sites_info AS(\n//   SELECT\n//     name,\n//     description,\n//     lat,\n//     lon,\n//     publish_name,\n//     site_id AS s_id,\n//     publish_id,\n//     type,\n//     space,\n//     cost\n//   FROM\n//    sites\n//   INNER JOIN\n//     publisher_info\n//   ON\n//     publisher_info.p_id = sites.publish_id)\n// SELECT\n//   *\n// FROM\n//   sites_info\n// `\n// }\n\n// if (msg.payload.user_id) {\n    msg.payload = `\n            WITH\n    user_info AS (\n    SELECT\n        publish_id AS pub_id\n    FROM\n       publishing_users\n    WHERE\n        user_id = '${msg.payload.user_id}'),\n    publisher_info AS (\n    SELECT\n        publish_id AS p_id,\n        name AS publish_name\n    FROM\n       publishing\n    RIGHT JOIN\n        user_info\n    ON\n        user_info.pub_id = publishing.publish_id),\n    sites_info AS(\n    SELECT\n        name,\n        description,\n        lat,\n        lon,\n        publish_name,\n        site_id AS s_id,\n        publish_id,\n    type,\n    space\n    FROM\n        sites\n    INNER JOIN\n        publisher_info\n    ON\n        publisher_info.p_id = sites.publish_id)\n    SELECT\n    *\n    FROM\n    sites_info\n    `;\n    return msg;\n\n// if(msg.payload.user_id){\n//     msg.payload = `with user_info \n// as (select publish_id as pub_id from seedoo.publishing_users\n// where user_id = '${msg.payload.user_id}'),\n// publisher_info \n// as (select publish_id as p_id, name as publish_name from seedoo.publishing \n// right join user_info \n// on user_info.pub_id = publishing.publish_id),\n// sites_info \n// as( select * from seedoo.sites\n// right join publisher_info \n// on publisher_info.p_id = sites.publish_id)\n// select name, description, lat, lon, publish_name, site_id, publish_id  from sites_info\n// where site_id is not null\n// `\n//     return msg\n// }\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "2a6064330f22c7da",
                "f72a72b9a78fff19"
            ]
        ]
    },
    {
        "id": "6081c6500e55c91f",
        "type": "http in",
        "z": "1c6436f0bc754238",
        "name": "",
        "url": "/getSitesById",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1000,
        "wires": [
            [
                "6c3212dcb71f2087"
            ]
        ]
    },
    {
        "id": "d205de703ae63d97",
        "type": "http response",
        "z": "1c6436f0bc754238",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 1000,
        "wires": []
    },
    {
        "id": "9facaec47f9ac32b",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "function 253",
        "func": "msg.oldpayload = msg.payload\nmsg.url = `https://maps.googleapis.com/maps/api/geocode/json?address=${msg.payload.city}|street_address=${msg.payload.street}|street_number=${msg.payload.street_number}|country=${msg.payload.country}&key=AIzaSyDjMxoZ0kXd7C0dxHhA7kv9Wj9QHuBM6lY`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "340906678bc828d5",
        "type": "http request",
        "z": "1c6436f0bc754238",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 1080,
        "wires": [
            [
                "625ee85ca7b4915c"
            ]
        ]
    },
    {
        "id": "625ee85ca7b4915c",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "function 254",
        "func": "msg.lat = msg.payload.results.map((e) => {\n    return e.geometry.location.lat\n})\n\nmsg.lng = msg.payload.results.map((e) => {\n    return e.geometry.location.lng\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 1080,
        "wires": [
            [
                "95ec440c61075086"
            ]
        ]
    },
    {
        "id": "95ec440c61075086",
        "type": "delay",
        "z": "1c6436f0bc754238",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "e52b7ed666238d82",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 480,
        "y": 800,
        "wires": [
            [
                "fc5b76fbe38cede8",
                "8ec86ee5e4fcecad"
            ]
        ]
    },
    {
        "id": "26b43d219573f787",
        "type": "function",
        "z": "1c6436f0bc754238",
        "name": "get all data",
        "func": "msg.payload = `select * FROM sites where space >  0`\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 800,
        "wires": [
            [
                "e52b7ed666238d82"
            ]
        ]
    },
    {
        "id": "2115ec58f2c9be84",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 480,
        "y": 720,
        "wires": [
            [
                "9b064f9b39109d4f",
                "5a9ed93a41b99d20"
            ]
        ]
    },
    {
        "id": "5c4f62dcc0efb3ac",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 880,
        "wires": [
            [
                "81121fd3f7261bab"
            ]
        ]
    },
    {
        "id": "8cd6c2813a03ab4a",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 940,
        "wires": [
            [
                "45edd1dd4ffe5277"
            ]
        ]
    },
    {
        "id": "2a6064330f22c7da",
        "type": "postgres",
        "z": "1c6436f0bc754238",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 1000,
        "wires": [
            [
                "d205de703ae63d97",
                "f72a72b9a78fff19"
            ]
        ]
    },
    {
        "id": "5a9ed93a41b99d20",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 3989",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 760,
        "wires": []
    },
    {
        "id": "6d7c54f16e0ac571",
        "type": "inject",
        "z": "1c6436f0bc754238",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 840,
        "wires": [
            [
                "26b43d219573f787"
            ]
        ]
    },
    {
        "id": "8ec86ee5e4fcecad",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 4005",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 840,
        "wires": []
    },
    {
        "id": "f72a72b9a78fff19",
        "type": "debug",
        "z": "1c6436f0bc754238",
        "name": "debug 4015",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 1040,
        "wires": []
    },
    {
        "id": "d80f566e19393aae",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/upload",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "facf8d3eda18ae6e",
                "2adb3fb7fcda260c"
            ]
        ]
    },
    {
        "id": "facf8d3eda18ae6e",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3934",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "f80ac6ed29821bad",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3937",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 140,
        "wires": []
    },
    {
        "id": "1c3127e82ffc4efe",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1160,
        "y": 180,
        "wires": []
    },
    {
        "id": "a3e3837df670300e",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 560",
        "func": "node.warn(msg);\nconst header = Buffer.from(\"mvhd\");\nconst buffer = msg.paylod;\nconst start = msg.payload.indexOf(header) + 17;\nconst timeScale = msg.payload.readUInt32BE(start);\nconst duration = msg.payload.readUInt32BE(start + 4);\nconst audioLength = Math.floor((duration / timeScale) * 1000) / 1000;\nmsg.duration = parseInt(audioLength);\n//msg.video_url = `https://datamanager-63330e347f8cc21100000003.iot.seedoo.co/showVideo/?fileName=${msg.filename}`;\nmsg.video_url = `https://d1du6oef5k8xwz.cloudfront.net/${msg.filename}`\n\nmsg.payload = `INSERT INTO\n  seedoo.ads_raw (\n    customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    status,\n    title,\n    SOURCE,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved\n    )\nSELECT\n  customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    '${msg.video_url}' as ad_creative_url,\n    ${msg.duration} as play_time,\n    createdAt,\n    status,\n    title,\n    source,\n    cpm,\n    'video' as ad_type,\n    real_cpm,\n    approved   \nFROM\n  seedoo.ads\nWHERE\n  ad_id='${msg.oldpayload.ad_id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "ffmpeg",
                "module": "ffmpeg"
            }
        ],
        "x": 810,
        "y": 180,
        "wires": [
            [
                "4100caa91ad22d42",
                "8a751c697ab2f3d3"
            ]
        ]
    },
    {
        "id": "77849d91c62eb3e3",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 561",
        "func": "msg.filename = `${Date.now()}${msg.req.files[0].originalname}`\n\nmsg.payload = msg.req.files[0].buffer\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "a3e3837df670300e",
                "68a9a4389bc583f5"
            ]
        ]
    },
    {
        "id": "5521a4ab06ab5c2c",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 350,
        "y": 320,
        "wires": []
    },
    {
        "id": "68a9a4389bc583f5",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3939",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 140,
        "wires": []
    },
    {
        "id": "4100caa91ad22d42",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3940",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 140,
        "wires": []
    },
    {
        "id": "2adb3fb7fcda260c",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 562",
        "func": "msg.oldpayload = msg.payload\n\nif(msg.req.files[0].mimetype == \"video/mp4\"){\nreturn[msg,null,null]\n}\nif (msg.req.files[0].mimetype == \"image/jpeg\" || msg.req.files[0].mimetype == \"image/png\"){\n    return[null,msg,null]\n}\nelse{\n    return[null,null,msg]\n}\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 260,
        "wires": [
            [
                "77849d91c62eb3e3",
                "0eb2d7db1fb60963"
            ],
            [
                "fc4ea3c0d73f8b2e",
                "e0c24e4f8c9ff943"
            ],
            [
                "5521a4ab06ab5c2c"
            ]
        ]
    },
    {
        "id": "fc4ea3c0d73f8b2e",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "set filename",
        "func": "msg.filename = `${Date.now()}${msg.req.files[0].originalname}`\nmsg.payload = msg.req.files[0].buffer\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 535,
        "y": 260,
        "wires": [
            [
                "92ffc73e96b153b3",
                "e0c24e4f8c9ff943"
            ]
        ],
        "l": false
    },
    {
        "id": "92ffc73e96b153b3",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 567",
        "func": "//let creative_url = `https://datamanager-63330e347f8cc21100000003.iot.seedoo.co/showImage/?fileName=${msg.filename}`;\nlet creative_url = `https://d1du6oef5k8xwz.cloudfront.net/${msg.filename}`\nmsg.payload = `INSERT INTO\n  seedoo.ads_raw (\n    customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    status,\n    title,\n    SOURCE,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved\n    )\nSELECT\n  customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    '${creative_url}' as ad_creative_url,\n    play_time,\n    createdAt,\n    status,\n    title,\n    source,\n    cpm,\n    'image' as ad_type,\n    real_cpm,\n    approved   \nFROM\n  seedoo.ads\nWHERE\n  ad_id='${msg.oldpayload.ad_id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 300,
        "wires": [
            [
                "7ee24ff647d54974",
                "5a3739c2155f2ae6"
            ]
        ]
    },
    {
        "id": "a17425dbf8d47fa8",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "e0c24e4f8c9ff943",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3945",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 340,
        "wires": []
    },
    {
        "id": "0eb2d7db1fb60963",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3946",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 180,
        "wires": []
    },
    {
        "id": "7ee24ff647d54974",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3947",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 340,
        "wires": []
    },
    {
        "id": "8a751c697ab2f3d3",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 980,
        "y": 180,
        "wires": [
            [
                "1c3127e82ffc4efe"
            ]
        ]
    },
    {
        "id": "5a3739c2155f2ae6",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 860,
        "y": 300,
        "wires": [
            [
                "a17425dbf8d47fa8"
            ]
        ]
    },
    {
        "id": "b7088782753ac0be",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getAds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "b732382e870bd8ed",
                "31d549cb14e38d48"
            ]
        ]
    },
    {
        "id": "97c26794fa18a383",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 580,
        "wires": []
    },
    {
        "id": "3d04e8e4df094464",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/deleteAD",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "4a0ab5cf22860f57",
                "f6206e6c1b3d15d0"
            ]
        ]
    },
    {
        "id": "058d4bed48de50fa",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 83",
        "func": "// msg.payload =`DELETE from seedoo.ads \n// where ad_id='${msg.payload.ad_id}'`\nmsg.payload = `UPDATE ads \nSET \nstatus='deleted'\nwhere ad_id='${msg.payload.ad_id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 840,
        "wires": [
            [
                "d440342e655a258f"
            ]
        ]
    },
    {
        "id": "8608ea21cb605ace",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 800,
        "wires": []
    },
    {
        "id": "d440342e655a258f",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 840,
        "wires": []
    },
    {
        "id": "b033c5dfb342c2cd",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 121",
        "func": "function uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\nlet file=global.get(\"fileName\")\nif(file){\n    msg.payload.ad_creative_url = `https://datamanager-629f15f0dfb63f130000010f.ubos.tech/showImage/?fileName=${global.get(\"fileName\")}`\n}\nmsg.ad_id = uuid();\nmsg.payload =`INSERT INTO seedoo.ads (customer_id, campaign_id,creative_id,ad_id,ad_creative_url,play_time)\nVALUES ('${msg.payload.customer_id}','${msg.payload.campaign_id}','${msg.payload.creative_id}','${msg.ad_id}','${msg.payload.ad_creative_url}',${msg.payload.play_time})`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "731df7a8a0da3cbf",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "getAds",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "020a73b0fef70c2b",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 142",
        "func": "\nfunction uuid() {\n    var dt = new Date().getTime();\n    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = (dt + Math.random() * 16) % 16 | 0;\n        dt = Math.floor(dt / 16);\n        return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n    });\n    return uuid;\n};\nlet file=global.get(\"fileName\")\n    let _date = (new Date()).toISOString();\n// if(file){\n//     msg.payload.ad_creative_url = `https://datamanager-629f15f0dfb63f130000010f.ubos.tech/showImage/?fileName=${global.get(\"fileName\")}`\n// }\nvar uid = uuid()\nmsg.ad_id = uid;\nmsg.payload =`INSERT INTO ads (customer_id, campaign_id,ad_id,ad_creative_url,play_time,createdAt,status,title,text_content,ad_type,sourse,real_cpm,publisher)\nVALUES ('${msg.oldpayload.customer_id}','${msg.oldpayload.campaign_id}','${msg.ad_id}','${msg.oldpayload.image}','${msg.oldpayload.time}','${_date}','${msg.oldpayload.status}','${msg.oldpayload.title}','${msg.oldpayload.content}','${msg.oldpayload.type}','${msg.oldpayload.sourse}', '${msg.payload[0].cost}', '${msg.payload[0].publish_id}')`\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 700,
        "wires": [
            [
                "035e2cace3a2a00b",
                "76902361ad73dccd"
            ]
        ]
    },
    {
        "id": "92baecb7081afe92",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 143",
        "func": "msg.payload={\n    ad_id: msg.ad_id\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 700,
        "wires": [
            [
                "23db2a30944bdfbe",
                "3417bdc875d38756"
            ]
        ]
    },
    {
        "id": "10dcf2509508a3e8",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/createAdNew",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 170,
        "y": 700,
        "wires": [
            [
                "f70e12ae3f1459c8",
                "9710f2e70c37747c"
            ]
        ]
    },
    {
        "id": "035e2cace3a2a00b",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 136",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "23db2a30944bdfbe",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 700,
        "wires": []
    },
    {
        "id": "3417bdc875d38756",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 660,
        "wires": []
    },
    {
        "id": "f70e12ae3f1459c8",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 135",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 170,
        "y": 660,
        "wires": []
    },
    {
        "id": "3a79a4ce0f6889a2",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 260",
        "func": "msg.payload =`DELETE from seedoo.ad_creatives \nwhere ad_id='${msg.payload.ad_id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 840,
        "wires": [
            [
                "4cec364f61b853e9"
            ]
        ]
    },
    {
        "id": "4cec364f61b853e9",
        "type": "google-cloud-bigquery",
        "z": "9389cb2012328a74",
        "account": "",
        "keyFilename": "/data/bigquerykey.json",
        "projectId": "adroit-router-351710",
        "query": "",
        "name": "",
        "x": 600,
        "y": 840,
        "wires": [
            [
                "d440342e655a258f"
            ]
        ]
    },
    {
        "id": "719de8f4d89d4c80",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 291",
        "func": "msg.payload = msg.payload.map((elem) => {\n    return {\n        ...elem, \n        color: elem.status === \"deleted\" ? \"red\" : elem.status === \"canceled\" ? \"red\" : elem.status === \"pending\" ? \"#ffe000\" : elem.status === \"canceled\" ? \"red\" : elem.status === \"draft\" ? \"#ffe000\" : elem.status === \"paused\" ? \"#ffe000\" : elem.status === \"running\" ? \"green\" : elem.status === \"approved\" ? \"green\" : \"black\",\n        createdAt: new Date(elem.createdat).toISOString().replace(\"T\", \" \").substring(0, 19)\n    }\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 580,
        "wires": [
            [
                "97c26794fa18a383",
                "731df7a8a0da3cbf"
            ]
        ]
    },
    {
        "id": "b732382e870bd8ed",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 333",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 540,
        "wires": []
    },
    {
        "id": "41377f0f75ddadb6",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 342",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 540,
        "wires": []
    },
    {
        "id": "4a0ab5cf22860f57",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 541",
        "func": "msg.payload = `UPDATE ads \nSET \nstatus='deleted'\nwhere ad_id='${msg.payload.ad_id}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 800,
        "wires": [
            [
                "f6206e6c1b3d15d0",
                "6562c368d2ee9964"
            ]
        ]
    },
    {
        "id": "f6206e6c1b3d15d0",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3924",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 760,
        "wires": []
    },
    {
        "id": "57224f64def3191f",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 80",
        "func": "node.warn(msg);\n    // msg.fromApp.user_id === \"63693abd7e0d851100000002\" || msg.fromApp.user_id === \"63369a63bf6e8f0011ed70f9\" || msg.fromApp.user_id === \"636a06857e0d851100000004\"\n// \n\n// if (msg.fromApp.user_id === '636a06857e0d851100000004'){\n//   msg.payload =`WITH\n//   campaign AS (\n//     SELECT campain_name, campain_id\n//     FROM seedoo.campaign\n//   ),\n//   ads_info AS (\n//     SELECT *\n//     FROM seedoo.ads \n//     LEFT OUTER JOIN campaign ON campaign_id = campaign.campain_id\n//   ),\n//   media AS (\n//     SELECT ad_creatives.ad_id, media_type_id\n//     FROM seedoo.ad_creatives\n//     JOIN ads_info ON ads_info.ad_id = ad_creatives.ad_id\n//   ),\n//   mediaVid AS (\n//     SELECT ad_video_creatives.ad_id, media_type_id\n//     FROM seedoo.ad_video_creatives\n//     JOIN ads_info ON ads_info.ad_id = ad_video_creatives.ad_id\n//   )\n// SELECT *\n// FROM ads_info\n// LEFT JOIN (\n//   SELECT ad_id, media_type_id FROM media\n//   UNION ALL\n//   SELECT ad_id, media_type_id FROM mediaVid\n// ) media ON media.ad_id = ads_info.ad_id\n// WHERE status = \"${msg.payload.status}\"\n// `\n// }\n\n// if (msg.fromApp.role.toString() === \"634d0902d44a8b0012b0569d\" || msg.fromApp.role.toString() === \"63369a63bf6e8f0011ed70f9\"){\n\n// if(msg.payload.name){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where title = \"${msg.payload.name}\" `\n// }\n// if(msg.payload.status){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where status = \"${msg.payload.status}\" `\n// }\n// if (msg.payload.status === \"\" && msg.payload.name === \"\"){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  `\n// }\n// global.set(\"fileName\",null)\n// }\n// // else  {\n//     if (msg.payload.name) {\n//         msg.payload = `WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//     campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//             campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//                 ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info where title = \"${msg.payload.name}\" `\n//     }\n//     if (msg.payload.status) {\n//         msg.payload = `WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//     campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//       campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//             ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info where status = '${msg.payload.status}'`\n//     }\n//     if (msg.payload.status === \"\" && msg.payload.name === \"\") {\n//         msg.payload = `\n//   WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//    campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//       campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//               ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info`\n//     }\n//     global.set(\"fileName\", null) \n\n// msg.payload = ` select * from ads where customer_id='${msg.fromApp.user_id}' and status='${msg.oldpayload.status}'`\nmsg.payload = `WITH\n  ads_info AS (\n    SELECT *\n    FROM ads\n    WHERE customer_id='${msg.fromApp.user_id}' AND status='${msg.oldpayload.status}'\n  ),\n  campaign_info AS (\n    SELECT *\n      FROM campaign\n  )\nSELECT *\nFROM ads_info\nLEFT JOIN campaign_info ON ads_info.campaign_id = campaign_info.campain_id;\n\n`\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 530,
        "y": 580,
        "wires": [
            [
                "41377f0f75ddadb6",
                "ab6116ff0106e16e"
            ]
        ]
    },
    {
        "id": "3c62e390133da925",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "New query",
        "func": "if (msg.payload.status_current === 'running') {\nmsg.payload = `\nINSERT INTO\n  seedoo.ads_raw (\n    customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    status,\n    title,\n    SOURCE,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved\n    )\nSELECT\n  customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    'paused' as status,\n    title,\n    source,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved   \nFROM\n  seedoo.ads\nWHERE\n  ad_id='${msg.payload.ad_id}'`\n}\nelse{\n  msg.payload = `\nINSERT INTO\n  seedoo.ads_raw (\n    customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    status,\n    title,\n    SOURCE,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved\n    )\nSELECT\n  customer_id,\n    campaign_id,\n    creative_id,\n    ad_id,\n    ad_creative_url,\n    play_time,\n    createdAt,\n    'running' as status,\n    title,\n    source,\n    cpm,\n    ad_type,\n    real_cpm,\n    approved   \nFROM\n  seedoo.ads\nWHERE\n  ad_id='${msg.payload.ad_id}'` \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 920,
        "wires": [
            [
                "0b90f9a4b8b73af9",
                "da31096b0c69eed6"
            ]
        ]
    },
    {
        "id": "e8ba38bf1c8cf6a4",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 430,
        "y": 920,
        "wires": [
            [
                "3c62e390133da925"
            ]
        ]
    },
    {
        "id": "0b90f9a4b8b73af9",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3837",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 880,
        "wires": []
    },
    {
        "id": "af7f0106e79285dd",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/updateApprovedAddStatus",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 920,
        "wires": [
            [
                "0b90f9a4b8b73af9",
                "e8ba38bf1c8cf6a4"
            ]
        ]
    },
    {
        "id": "9f601b93310e1e55",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 920,
        "wires": []
    },
    {
        "id": "ab6116ff0106e16e",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 700,
        "y": 580,
        "wires": [
            [
                "719de8f4d89d4c80",
                "228a1135d726b0ee"
            ]
        ]
    },
    {
        "id": "76902361ad73dccd",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 900,
        "y": 700,
        "wires": [
            [
                "92baecb7081afe92"
            ]
        ]
    },
    {
        "id": "da31096b0c69eed6",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 780,
        "y": 920,
        "wires": [
            [
                "9f601b93310e1e55"
            ]
        ]
    },
    {
        "id": "6562c368d2ee9964",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 800,
        "wires": [
            [
                "8608ea21cb605ace"
            ]
        ]
    },
    {
        "id": "31d549cb14e38d48",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 350,
        "y": 580,
        "wires": [
            [
                "57224f64def3191f",
                "abb1bf4e06142f21"
            ]
        ]
    },
    {
        "id": "abb1bf4e06142f21",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 3998",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 540,
        "wires": []
    },
    {
        "id": "d57950de0aa11a41",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "get all data",
        "func": "if (msg.fromApp.role.toString() === \"634d0902d44a8b0012b0569d\" || msg.fromApp.role.toString() === \"63369a63bf6e8f0011ed70f9\") {\nmsg.payload = `\nwith user_campaign_info \nas (select campain_id as cam_id, user_id from campaign_users\n),\ncampaign  \nas (select * from campaign \n join user_campaign_info \non campain_id = user_campaign_info.cam_id)\nselect distinct (campain_id), campain_name from campaign order by campain_name ASC\n`\n\n}\nelse{\n    msg.payload = `with user_campaign_info \nas (select campain_id as cam_id, user_id from campaign_users\nwhere user_id = '${msg.fromApp.user_id}'),\ncampaign  \nas (select * from campaign \n join user_campaign_info \non campain_id = user_campaign_info.cam_id)\nselect distinct (campain_id), campain_name from campaign order by campain_name ASC\n`\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1060,
        "wires": [
            [
                "d5392f35c96c6d6c",
                "b4629c4f78dfa750"
            ]
        ]
    },
    {
        "id": "48c84faa4180437d",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getCampaignById",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 1060,
        "wires": [
            [
                "a105a3f82b9eaf1c"
            ]
        ]
    },
    {
        "id": "c4c2c923a18c4612",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 970,
        "y": 1060,
        "wires": []
    },
    {
        "id": "d5392f35c96c6d6c",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 344",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a105a3f82b9eaf1c",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 450,
        "y": 1060,
        "wires": [
            [
                "d57950de0aa11a41",
                "d5392f35c96c6d6c"
            ]
        ]
    },
    {
        "id": "b4629c4f78dfa750",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 820,
        "y": 1060,
        "wires": [
            [
                "c4c2c923a18c4612"
            ]
        ]
    },
    {
        "id": "228a1135d726b0ee",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "getAds",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 540,
        "wires": []
    },
    {
        "id": "a7b1d5f697abc504",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getAdss",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 480,
        "wires": [
            [
                "54bbe97295a25d94",
                "0ceb6fce6121f979"
            ]
        ]
    },
    {
        "id": "a64d94be5390ef39",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 480,
        "wires": []
    },
    {
        "id": "c36fd1bed54df779",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "getAds",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 440,
        "wires": []
    },
    {
        "id": "3badfcfb3fb3b437",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 610",
        "func": "msg.payload = msg.payload.map((elem) => {\n    return {\n        ...elem, \n        color: elem.status === \"deleted\" ? \"red\" : elem.status === \"canceled\" ? \"red\" : elem.status === \"pending\" ? \"#ffe000\" : elem.status === \"canceled\" ? \"red\" : elem.status === \"draft\" ? \"#ffe000\" : elem.status === \"paused\" ? \"#ffe000\" : elem.status === \"running\" ? \"green\" : elem.status === \"approved\" ? \"green\" : \"black\",\n        createdAt: new Date(elem.createdat).toISOString().replace(\"T\", \" \").substring(0, 19)\n    }\n})\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 480,
        "wires": [
            [
                "a64d94be5390ef39",
                "c36fd1bed54df779"
            ]
        ]
    },
    {
        "id": "54bbe97295a25d94",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4000",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 150,
        "y": 440,
        "wires": []
    },
    {
        "id": "3c87e28a9b35db98",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4001",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 440,
        "wires": []
    },
    {
        "id": "0ceb6fce6121f979",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 611",
        "func": "node.warn(msg);\n    // msg.fromApp.user_id === \"63693abd7e0d851100000002\" || msg.fromApp.user_id === \"63369a63bf6e8f0011ed70f9\" || msg.fromApp.user_id === \"636a06857e0d851100000004\"\n// \n\n// if (msg.fromApp.user_id === '636a06857e0d851100000004'){\n//   msg.payload =`WITH\n//   campaign AS (\n//     SELECT campain_name, campain_id\n//     FROM seedoo.campaign\n//   ),\n//   ads_info AS (\n//     SELECT *\n//     FROM seedoo.ads \n//     LEFT OUTER JOIN campaign ON campaign_id = campaign.campain_id\n//   ),\n//   media AS (\n//     SELECT ad_creatives.ad_id, media_type_id\n//     FROM seedoo.ad_creatives\n//     JOIN ads_info ON ads_info.ad_id = ad_creatives.ad_id\n//   ),\n//   mediaVid AS (\n//     SELECT ad_video_creatives.ad_id, media_type_id\n//     FROM seedoo.ad_video_creatives\n//     JOIN ads_info ON ads_info.ad_id = ad_video_creatives.ad_id\n//   )\n// SELECT *\n// FROM ads_info\n// LEFT JOIN (\n//   SELECT ad_id, media_type_id FROM media\n//   UNION ALL\n//   SELECT ad_id, media_type_id FROM mediaVid\n// ) media ON media.ad_id = ads_info.ad_id\n// WHERE status = \"${msg.payload.status}\"\n// `\n// }\n\n// if (msg.fromApp.role.toString() === \"634d0902d44a8b0012b0569d\" || msg.fromApp.role.toString() === \"63369a63bf6e8f0011ed70f9\"){\n\n// if(msg.payload.name){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where title = \"${msg.payload.name}\" `\n// }\n// if(msg.payload.status){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where status = \"${msg.payload.status}\" `\n// }\n// if (msg.payload.status === \"\" && msg.payload.name === \"\"){\n//   msg.payload = `WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  `\n// }\n// global.set(\"fileName\",null)\n// }\n// // else  {\n//     if (msg.payload.name) {\n//         msg.payload = `WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//     campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//             campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//                 ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info where title = \"${msg.payload.name}\" `\n//     }\n//     if (msg.payload.status) {\n//         msg.payload = `WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//     campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//       campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//             ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info where status = '${msg.payload.status}'`\n//     }\n//     if (msg.payload.status === \"\" && msg.payload.name === \"\") {\n//         msg.payload = `\n//   WITH\n//   user_info_campaign AS(\n//     SELECT\n//     user_id,\n//     campain_id AS cam_id\n//   FROM\n//    campaign_users\n//   WHERE\n//     user_id = '${msg.fromApp.user_id}'),\n//     campaign AS(\n//         SELECT\n//     campain_name,\n//         campain_id\n//   FROM\n//       campaign\n//   JOIN\n//     user_info_campaign\n//   ON\n//     user_info_campaign.cam_id = campain_id),\n//         ads_info AS(\n//             SELECT\n//             *\n//             FROM\n//               ads\n//   JOIN\n//     campaign\n//   ON\n//     campaign.campain_id = campaign_id)\n// SELECT\n//     *\n//     FROM\n// ads_info`\n//     }\n//     global.set(\"fileName\", null) \n\n// msg.payload = `\n// WITH\n//   ads_info AS (\n//     SELECT\n//       ads.*,\n//       campaign.campain_name\n//     FROM\n//       ads\n//     LEFT JOIN\n//       campaign\n//     ON\n//       campaign.campain_id = campain_id\n//   )\n// SELECT\n//   *\n// FROM\n//   ads_info;\n// `\n\nmsg.payload = `SELECT \n  customer_id, \n  status, \n  campaign_id, \n  COUNT(*) \nFROM \n  ads \nWHERE \n  customer_id = '6458d7bf6044531100000005' \n  AND status = 'pending' \nGROUP BY \n  customer_id, \n  status, \n  campaign_id \nHAVING \n  COUNT(*) > 1;\n`\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "3c87e28a9b35db98",
                "992cd2d4258ad2b4"
            ]
        ]
    },
    {
        "id": "992cd2d4258ad2b4",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 700,
        "y": 480,
        "wires": [
            [
                "3badfcfb3fb3b437",
                "047e1c730eeb70b6"
            ]
        ]
    },
    {
        "id": "6f5bc46e0e545773",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4002",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 440,
        "wires": []
    },
    {
        "id": "047e1c730eeb70b6",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "getAds",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 440,
        "wires": []
    },
    {
        "id": "7f709fb942feac6c",
        "type": "inject",
        "z": "9389cb2012328a74",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "0ceb6fce6121f979"
            ]
        ]
    },
    {
        "id": "9710f2e70c37747c",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 612",
        "func": "msg.oldpayload = msg.payload\nmsg.payload = `select * from sites where site_id = '${msg.payload.sourse}'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 700,
        "wires": [
            [
                "93d12f7b0bfc8f8a",
                "fc74de07ef7a6f31"
            ]
        ]
    },
    {
        "id": "fc74de07ef7a6f31",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 540,
        "y": 700,
        "wires": [
            [
                "efcda03275a6f221",
                "1a4ce5ec61c0ed69",
                "020a73b0fef70c2b"
            ]
        ]
    },
    {
        "id": "93d12f7b0bfc8f8a",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4003",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 660,
        "wires": []
    },
    {
        "id": "efcda03275a6f221",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4004",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 660,
        "wires": []
    },
    {
        "id": "1a4ce5ec61c0ed69",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 613",
        "func": "let space = msg.payload[0].space - 1\nmsg.payload = `UPDATE sites \nSET \nspace=${space}\nwhere site_id='${msg.payload[0].site_id}'`\n\n// msg.payload = `UPDATE sites \n// SET \n// space=3\n// where site_id='0e9ff5b3-51bc-41aa-b385-439a986e3817'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 740,
        "wires": [
            [
                "4b9b872d73ed13dc"
            ]
        ]
    },
    {
        "id": "232349e243e9f50b",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4006",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 780,
        "wires": []
    },
    {
        "id": "4b9b872d73ed13dc",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 900,
        "y": 760,
        "wires": [
            [
                "232349e243e9f50b"
            ]
        ]
    },
    {
        "id": "dcf85a8142aa9ceb",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getPendingAds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 1320,
        "wires": [
            [
                "e487437a3d213ad4",
                "9bca6779c878a04e"
            ]
        ]
    },
    {
        "id": "e487437a3d213ad4",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 346",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1280,
        "wires": []
    },
    {
        "id": "9bca6779c878a04e",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 430,
        "y": 1320,
        "wires": [
            [
                "01fee50454df172c",
                "7da7853b5be549cc"
            ]
        ]
    },
    {
        "id": "01fee50454df172c",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 347",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1280,
        "wires": []
    },
    {
        "id": "44e8d5f7511d52c8",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 1320,
        "wires": []
    },
    {
        "id": "968e533743c0fa69",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 348",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1280,
        "wires": []
    },
    {
        "id": "b453f0067af9ebe1",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/updateAddStatus",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 240,
        "y": 1380,
        "wires": [
            [
                "df1656d73ff7c69c",
                "6f190b79169981f4"
            ]
        ]
    },
    {
        "id": "df1656d73ff7c69c",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 349",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1360,
        "wires": []
    },
    {
        "id": "3fe772ca817a39c5",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 1400,
        "wires": []
    },
    {
        "id": "6f190b79169981f4",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 450,
        "y": 1400,
        "wires": [
            [
                "602e494c4594a52d"
            ]
        ]
    },
    {
        "id": "52e760f2d32dd518",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 308",
        "func": "let approved = msg.payload.approved\n\nif (msg.fromApp.role.toString() === \"634d0902d44a8b0012b0569d\" || msg.fromApp.role.toString() === \"63369a63bf6e8f0011ed70f9\") {\n    msg.payload = [\n        {\n        \"label\": \"Draft\",\n        \"value\": \"draft\"\n        },\n        {\n            \"label\": \"Pending\",\n            \"value\": \"pending\"\n        },\n        {\n            \"label\": \"Approved\",\n            \"value\": \"approved\"\n        },\n        {\n            \"label\": \"Running\",\n            \"value\": \"running\"\n        },\n        {\n            \"label\": \"Deleted\",\n            \"value\": \"deleted\"\n        },\n        {\n            \"label\": \"Paused\",\n            \"value\": \"paused\"\n        },\n        {\n            \"label\": \"Canceled\",\n            \"value\": \"canceled\"\n        },\n        {\n            \"label\": \"default\",\n            \"value\": \"default\"\n        }]\n}\nelse{\n    if (approved == 'true') {\n        msg.payload = [\n            {\n                \"label\": \"Running\",\n                \"value\": \"running\"\n            },\n            {\n                \"label\": \"Deleted\",\n                \"value\": \"deleted\"\n            },\n            {\n                \"label\": \"Pending\",\n                \"value\": \"pending\"\n            }\n        ]\n    }\n    if (approved == 'false') {\n        msg.payload = [\n            {\n                \"label\": \"Pending\",\n                \"value\": \"pending\"\n            },\n            {\n                \"label\": \"Deleted\",\n                \"value\": \"deleted\"\n            }\n        ]\n    }\n    if(approved == 'null'){\n        msg.payload = [\n            {\n                \"label\": \"Pending\",\n                \"value\": \"pending\"\n            },\n            {\n                \"label\": \"Deleted\",\n                \"value\": \"deleted\"\n            },\n            {\n                \"label\": \"Draft\",\n                \"value\": \"draft\"\n            }\n        ] \n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1580,
        "wires": [
            [
                "c4ced120a7c8d398",
                "435972dd4bda41a8"
            ]
        ]
    },
    {
        "id": "c4ced120a7c8d398",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 352",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 1540,
        "wires": []
    },
    {
        "id": "fdc66495661aad06",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getAdStatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1580,
        "wires": [
            [
                "c43350c3d4538cba",
                "c4ced120a7c8d398"
            ]
        ]
    },
    {
        "id": "435972dd4bda41a8",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c43350c3d4538cba",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 430,
        "y": 1580,
        "wires": [
            [
                "52e760f2d32dd518",
                "c4ced120a7c8d398"
            ]
        ]
    },
    {
        "id": "602e494c4594a52d",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "New query",
        "func": "msg.payload = `\nupdate ads set \n    status= '${msg.payload.status}' \nWHERE\n  ad_id='${msg.payload.ad_id}'`\n\nreturn msg;\n\n\n// if (msg.payload.status_current === 'approved') {\n// msg.payload = `\n// INSERT INTO\n//   seedoo.ads_raw (\n//     customer_id,\n//     campaign_id,\n//     creative_id,\n//     ad_id,\n//     ad_creative_url,\n//     play_time,\n//     createdAt,\n//     status,\n//     title,\n//     SOURCE,\n//     cpm,\n//     ad_type,\n//     real_cpm,\n//     approved\n//     )\n// SELECT\n//   customer_id,\n//     campaign_id,\n//     creative_id,\n//     ad_id,\n//     ad_creative_url,\n//     play_time,\n//     createdAt,\n//    '${msg.payload.status}' as status,\n//     title,\n//     source,\n//     cpm,\n//     ad_type,\n//     ${msg.payload.cpm} as real_cpm,\n//     true as approved   \n// FROM\n//   seedoo.ads\n// WHERE\n//   ad_id='${msg.payload.ad_id}'`\n// }\n// else{\n//   msg.payload = `\n// INSERT INTO\n//   seedoo.ads_raw (\n//     customer_id,\n//     campaign_id,\n//     creative_id,\n//     ad_id,\n//     ad_creative_url,\n//     play_time,\n//     createdAt,\n//     status,\n//     title,\n//     SOURCE,\n//     cpm,\n//     ad_type,\n//     real_cpm,\n//     approved\n//     )\n// SELECT\n//   customer_id,\n//     campaign_id,\n//     creative_id,\n//     ad_id,\n//     ad_creative_url,\n//     play_time,\n//     createdAt,\n//     '${msg.payload.status}' as status,\n//     title,\n//     source,\n//     cpm,\n//     ad_type,\n//     ${msg.payload.cpm} as real_cpm,\n//     false as approved   \n// FROM\n//   seedoo.ads\n// WHERE\n//   ad_id='${msg.payload.ad_id}'` \n// }\n// return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1400,
        "wires": [
            [
                "df1656d73ff7c69c",
                "46c57389a3c348ae"
            ]
        ]
    },
    {
        "id": "31a964f071f1c078",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 800,
        "y": 1320,
        "wires": [
            [
                "44e8d5f7511d52c8"
            ]
        ]
    },
    {
        "id": "46c57389a3c348ae",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 800,
        "y": 1400,
        "wires": [
            [
                "3fe772ca817a39c5"
            ]
        ]
    },
    {
        "id": "b3ad02df09bfc6de",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getPendingAdsss",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "efc607da1b1ad24d",
                "c1db6057421d16eb"
            ]
        ]
    },
    {
        "id": "c1db6057421d16eb",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 614",
        "func": "node.warn(msg);\n// if (msg.payload.campaign !== null){\n//   msg.payload = ` WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where status = \"pending\" and  campain_id = '${msg.payload.campaign}' `\n// }\n\nmsg.payload = `\nSELECT *\nFROM ads\nWHERE status = 'pending';\n `\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 370,
        "y": 1200,
        "wires": [
            [
                "9cad33a1f5329363",
                "2bf1f498ed3be592"
            ]
        ]
    },
    {
        "id": "efc607da1b1ad24d",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4007",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 130,
        "y": 1160,
        "wires": []
    },
    {
        "id": "9cad33a1f5329363",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4008",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1160,
        "wires": []
    },
    {
        "id": "aa630e7293092d9a",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 690,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c7d669a75627ca87",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4009",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1160,
        "wires": []
    },
    {
        "id": "2bf1f498ed3be592",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 560,
        "y": 1200,
        "wires": [
            [
                "aa630e7293092d9a"
            ]
        ]
    },
    {
        "id": "2dbe2e8f809d2844",
        "type": "inject",
        "z": "9389cb2012328a74",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 740,
        "wires": [
            [
                "1a4ce5ec61c0ed69"
            ]
        ]
    },
    {
        "id": "8c4d954a71103dba",
        "type": "inject",
        "z": "9389cb2012328a74",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 1480,
        "wires": [
            [
                "97be160480071b80"
            ]
        ]
    },
    {
        "id": "97be160480071b80",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 615",
        "func": "msg.payload = `WITH\n  pub_inf AS (SELECT publish_id as publish FROM publishing_users WHERE user_id = '64536c016044531100000003'),\n  sites as(select * from sites LEFT OUTER JOIN pub_inf ON publish_id = pub_inf.publish),\n  user_in AS (\n    SELECT campain_id AS cam_id\n    FROM campaign_users\n    WHERE user_id = '64536c016044531100000003'\n  ),\n  campaign AS (\n    SELECT campain_name, campain_id\n    FROM campaign\n    LEFT OUTER JOIN user_in ON campain_id = user_in.cam_id\n  ),\n  ads_info AS (\n    SELECT *\n    FROM ads\n    LEFT OUTER JOIN campaign ON campaign_id = campaign.campain_id\n  )\nSELECT *\nFROM ads_info\nLEFT OUTER JOIN sites ON publisher IN (sites.publish_id)\nWHERE status = 'pending' and publisher IN (sites.publish_id);\n`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1480,
        "wires": [
            [
                "0cd58eba0f8c17bf"
            ]
        ]
    },
    {
        "id": "7329bfc9393622d4",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4012",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1500,
        "wires": []
    },
    {
        "id": "0cd58eba0f8c17bf",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 620,
        "y": 1480,
        "wires": [
            [
                "7329bfc9393622d4"
            ]
        ]
    },
    {
        "id": "7da7853b5be549cc",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 303",
        "func": "node.warn(msg);\n// if (msg.payload.campaign !== null){\n//   msg.payload = ` WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where status = \"pending\" and  campain_id = '${msg.payload.campaign}' `\n// }\n\nmsg.payload = `SELECT ads.*, campaign.campain_name, sites.*\nFROM ads\nJOIN campaign ON ads.campaign_id = campaign.campain_id\nJOIN sites ON ads.sourse = sites.site_id\nJOIN publishing_users ON sites.publish_id = publishing_users.publish_id\nWHERE ads.status = 'pending' AND publishing_users.user_id = '${msg.fromApp.user_id}'\n\n`\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 610,
        "y": 1320,
        "wires": [
            [
                "01fee50454df172c",
                "31a964f071f1c078"
            ]
        ]
    },
    {
        "id": "01af65ec8de5d4f5",
        "type": "http in",
        "z": "9389cb2012328a74",
        "name": "",
        "url": "/getApprovedAds",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1700,
        "wires": [
            [
                "3639b97b5c8d5c16",
                "a726a00b11769cec"
            ]
        ]
    },
    {
        "id": "3639b97b5c8d5c16",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4016",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1660,
        "wires": []
    },
    {
        "id": "a726a00b11769cec",
        "type": "subflow:26bcada27220ca80",
        "z": "9389cb2012328a74",
        "name": "",
        "x": 410,
        "y": 1700,
        "wires": [
            [
                "e076b0360b4e5c0b",
                "8ea51bc52ef77bfa"
            ]
        ]
    },
    {
        "id": "e076b0360b4e5c0b",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4017",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1660,
        "wires": []
    },
    {
        "id": "6bb3b403e6044720",
        "type": "http response",
        "z": "9389cb2012328a74",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 1700,
        "wires": []
    },
    {
        "id": "391a1d5c767b4082",
        "type": "debug",
        "z": "9389cb2012328a74",
        "name": "debug 4018",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 1660,
        "wires": []
    },
    {
        "id": "90f5a841f70c979e",
        "type": "postgres",
        "z": "9389cb2012328a74",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 780,
        "y": 1700,
        "wires": [
            [
                "6bb3b403e6044720",
                "391a1d5c767b4082"
            ]
        ]
    },
    {
        "id": "8ea51bc52ef77bfa",
        "type": "function",
        "z": "9389cb2012328a74",
        "name": "function 618",
        "func": "node.warn(msg);\n// if (msg.payload.campaign !== null){\n//   msg.payload = ` WITH\n//   campaign AS(\n//   SELECT\n//     campain_name,\n//     campain_id\n//   FROM\n//     seedoo.campaign ),\n//   ads_info AS(\n//   SELECT\n//     *\n//   FROM\n//     seedoo.ads \n//    left outer join  campaign\n//     on campaign_id = campaign.campain_id)\n// SELECT\n//   *\n// FROM\n//   ads_info  where status = \"pending\" and  campain_id = '${msg.payload.campaign}' `\n// }\n\nmsg.payload = `SELECT ads.*, campaign.campain_name, sites.*, publishing.name as pub_name\nFROM ads\nJOIN campaign ON ads.campaign_id = campaign.campain_id\nJOIN sites ON ads.sourse = sites.site_id\nJOIN publishing_users ON sites.publish_id = publishing_users.publish_id\nJOIN publishing AS publishing ON sites.publish_id = publishing.publish_id\nWHERE ads.status IN ('approved','running') AND publishing_users.user_id = '${msg.fromApp.user_id}'\n\n`\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "objectid",
                "module": "objectid"
            }
        ],
        "x": 590,
        "y": 1700,
        "wires": [
            [
                "e076b0360b4e5c0b",
                "90f5a841f70c979e"
            ]
        ]
    },
    {
        "id": "a27befb92bc60ee4",
        "type": "inject",
        "z": "958cd5c3acecabb1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 100,
        "wires": [
            [
                "395490b3938e5962"
            ]
        ]
    },
    {
        "id": "67fbbbaa37cefabd",
        "type": "websocket out",
        "z": "958cd5c3acecabb1",
        "name": "",
        "server": "c242409209d7320d",
        "client": "",
        "x": 570,
        "y": 100,
        "wires": []
    },
    {
        "id": "395490b3938e5962",
        "type": "function",
        "z": "958cd5c3acecabb1",
        "name": "function 19",
        "func": "let test_data = global.get(\"data\")\n\nmsg.payload=test_data\nnode.warn(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            [
                "67fbbbaa37cefabd",
                "79586b15b8461aca"
            ]
        ]
    },
    {
        "id": "dce9537a6bb95f89",
        "type": "postgres",
        "z": "958cd5c3acecabb1",
        "postgresdb": "b82197f006b95945",
        "name": "",
        "output": true,
        "perrow": false,
        "rowspermsg": "1",
        "return_on_error": false,
        "limit_queries": "0",
        "limit_by": "payload",
        "limit_value": "1",
        "limit_drop_intermediate": false,
        "limit_drop_if_in_queue": false,
        "outputs": true,
        "x": 480,
        "y": 200,
        "wires": [
            [
                "c0986b4115236d23",
                "3b387e93f50af630"
            ]
        ]
    },
    {
        "id": "0a676d1d252a4e0b",
        "type": "inject",
        "z": "958cd5c3acecabb1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "180",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "3fc2ef316fe3701f"
            ]
        ]
    },
    {
        "id": "3fc2ef316fe3701f",
        "type": "function",
        "z": "958cd5c3acecabb1",
        "name": "function 616",
        "func": "msg.payload = `select * from sites where type ='billboard'`\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 200,
        "wires": [
            [
                "dce9537a6bb95f89"
            ]
        ]
    },
    {
        "id": "3b387e93f50af630",
        "type": "debug",
        "z": "958cd5c3acecabb1",
        "name": "debug 4013",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 240,
        "wires": []
    },
    {
        "id": "c0986b4115236d23",
        "type": "function",
        "z": "958cd5c3acecabb1",
        "name": "function 617",
        "func": "let test = msg.payload.map((e)=> {\n    if (e.space > 0){\n   return{\n       ...e,\n       maccAdress: e.site_id,\n       running: true,\n       host_name: e.site_id,\n       modal_info: `<div>type : ${e.type},</br> name : ${e.name},</br> description: ${e.description},</br> space :${e.space},</br> cost : $${e.cost} for one week</div>`\n   } \n}\n    if (e.space < 1) {\n        return {\n            ...e,\n            maccAdress: e.site_id,\n            running: false,\n            host_name: e.site_id,\n            modal_info: `<div>type : ${e.type},</br> name : ${e.name},</br> description: ${e.description},</br> space :${e.space},</br> cost : $${e.cost} for one week</div>`\n        } \n    }\n})\n\n\nglobal.set('data', test)\nreturn msg;\n\n// storage_percentageDiskUsed: storage_percentageDiskUsed,\n\n                                           \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 200,
        "wires": [
            [
                "3b387e93f50af630"
            ]
        ]
    },
    {
        "id": "33908fb9e6b2485c",
        "type": "http in",
        "z": "958cd5c3acecabb1",
        "name": "",
        "url": "/tee",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "395490b3938e5962"
            ]
        ]
    },
    {
        "id": "79586b15b8461aca",
        "type": "http response",
        "z": "958cd5c3acecabb1",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "b4df32986876dc5c",
        "type": "debug",
        "z": "958cd5c3acecabb1",
        "name": "debug 4014",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 60,
        "wires": []
    }
]